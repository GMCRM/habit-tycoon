import{Fa as x,Ga as P,b as L}from"./chunk-HNGY6TOH.js";import{a as M,b as R,j as g}from"./chunk-VI73JOY6.js";var V=(()=>{let D=class D{constructor(){this.supabase=x(P.supabaseUrl,P.supabaseKey)}getBusinessTypes(){return g(this,null,function*(){try{let{data:r,error:e}=yield this.supabase.from("business_types").select("*").order("base_cost",{ascending:!0});if(e)throw console.error("Error fetching business types:",e),e;return r||[]}catch(r){throw console.error("Error in getBusinessTypes:",r),r}})}getUserHabitBusinesses(r){return g(this,null,function*(){try{let{data:e,error:t}=yield this.supabase.from("habit_businesses").select(`
          *,
          business_types (
            id,
            name,
            icon,
            base_cost,
            base_pay,
            description
          )
        `).eq("user_id",r).eq("is_active",!0).order("created_at",{ascending:!1});if(t)throw console.error("Error fetching habit businesses:",t),t;return e||[]}catch(e){throw console.error("Error in getUserHabitBusinesses:",e),e}})}createHabitBusiness(r){return g(this,null,function*(){try{let{data:e,error:t}=yield this.supabase.from("business_types").select("*").eq("id",r.business_type_id).single();if(t||!e)throw new Error("Invalid business type");let{data:{user:s},error:o}=yield this.supabase.auth.getUser();if(o||!s)throw new Error("User not authenticated");let{data:n,error:i}=yield this.supabase.from("user_profiles").select("cash").eq("id",s.id).single();if(i||!n)throw new Error("Could not load user profile");if(n.cash<e.base_cost)throw new Error(`Insufficient funds. Need $${e.base_cost}, but you only have $${n.cash}`);if(r.goal_value<1||r.goal_value>99)throw new Error("Goal value must be between 1 and 99");let a={user_id:s.id,business_type_id:r.business_type_id,business_name:r.business_name,business_icon:e.icon,cost:e.base_cost,habit_description:r.habit_description,frequency:r.frequency,goal_value:r.goal_value,current_progress:0,earnings_per_completion:this.calculateReasonableEarnings(e.base_pay,r.goal_value),streak:0,total_completions:0,total_earnings:0,is_active:!0},{data:d,error:h}=yield this.supabase.from("habit_businesses").insert(a).select().single();if(h)throw console.error("Error creating habit business:",h),h;let l=n.cash-e.base_cost,{error:c}=yield this.supabase.from("user_profiles").update({cash:l,updated_at:new Date().toISOString()}).eq("id",s.id);if(c)throw console.error("Error updating user cash:",c),new Error("Habit-business created but failed to deduct payment");try{yield this.createBusinessStock(d.id),console.log("\u2705 Business stock created for new habit business")}catch(p){console.error("\u26A0\uFE0F Warning: Failed to create business stock:",p)}return d}catch(e){throw console.error("Error in createHabitBusiness:",e),e}})}upgradeHabitBusiness(r,e,t){return g(this,null,function*(){try{let{data:{user:s},error:o}=yield this.supabase.auth.getUser();if(o||!s)throw new Error("User not authenticated");let{data:n,error:i}=yield this.supabase.from("business_types").select("*").eq("id",e).single();if(i||!n)throw new Error("Invalid new business type");let{data:a,error:d}=yield this.supabase.from("user_profiles").select("cash").eq("id",s.id).single();if(d||!a)throw new Error("Could not load user profile");if(a.cash<t)throw new Error(`Insufficient funds. Need $${t}, but you only have $${a.cash}`);let{error:h}=yield this.supabase.from("habit_businesses").update({business_type_id:e,business_icon:n.icon,cost:n.base_cost,earnings_per_completion:this.calculateReasonableEarnings(n.base_pay,1),updated_at:new Date().toISOString()}).eq("id",r).eq("user_id",s.id);if(h)throw console.error("Error updating habit business:",h),h;let l=a.cash-t,{error:c}=yield this.supabase.from("user_profiles").update({cash:l,updated_at:new Date().toISOString()}).eq("id",s.id);if(c)throw console.error("Error updating user cash after upgrade:",c),new Error("Business upgraded but failed to deduct payment");console.log("\u2705 Successfully upgraded habit business")}catch(s){throw console.error("Error in upgradeHabitBusiness:",s),s}})}updateHabitBusiness(r,e){return g(this,null,function*(){try{let{data:{user:t},error:s}=yield this.supabase.auth.getUser();if(s||!t)throw new Error("User not authenticated");let{data:o,error:n}=yield this.supabase.from("habit_businesses").select("*").eq("id",r).eq("user_id",t.id).single();if(n||!o)throw new Error("Habit-business not found or you do not have permission to edit it");if(e.goal_value!==void 0&&(e.goal_value<1||e.goal_value>99))throw new Error("Goal value must be between 1 and 99");let{error:i}=yield this.supabase.from("habit_businesses").update(R(M({},e),{updated_at:new Date().toISOString()})).eq("id",r);if(i)throw console.error("Error updating habit business:",i),i}catch(t){throw console.error("Error in updateHabitBusiness:",t),t}})}deleteHabitBusiness(r){return g(this,null,function*(){try{let{data:{user:e},error:t}=yield this.supabase.auth.getUser();if(t||!e)throw new Error("User not authenticated");let{data:s,error:o}=yield this.supabase.from("habit_businesses").select(`
          *,
          business_types (
            base_cost
          )
        `).eq("id",r).eq("user_id",e.id).eq("is_active",!0).single();if(o||!s)throw new Error("Habit-business not found or you do not have permission to delete it");let{data:n,error:i}=yield this.supabase.from("habit_businesses").select("id").eq("user_id",e.id).eq("is_active",!0);if(i)throw new Error("Could not verify your habit businesses");if(!n||n.length<=1)throw new Error("Cannot delete your only habit business! You must have at least one active business.");let a=s.cost||s.business_types?.base_cost||1,d=Math.floor(a*.7),{error:h}=yield this.supabase.from("habit_businesses").update({is_active:!1,updated_at:new Date().toISOString()}).eq("id",r);if(h)throw console.error("Error deleting habit business:",h),h;let{data:l,error:c}=yield this.supabase.from("user_profiles").select("cash").eq("id",e.id).single();if(c||!l)throw new Error("Could not load user profile");let p=l.cash+d,{error:_}=yield this.supabase.from("user_profiles").update({cash:p,updated_at:new Date().toISOString()}).eq("id",e.id);if(_)throw console.error("Error updating user cash after sale:",_),new Error("Habit business deleted but failed to add sale proceeds");return d}catch(e){throw console.error("Error in deleteHabitBusiness:",e),e}})}getLocalDateString(r=new Date){let e=r.getFullYear(),t=String(r.getMonth()+1).padStart(2,"0"),s=String(r.getDate()).padStart(2,"0");return`${e}-${t}-${s}`}completeHabit(r){return g(this,null,function*(){try{let{data:{user:e},error:t}=yield this.supabase.auth.getUser();if(t||!e)throw new Error("User not authenticated");let{data:s,error:o}=yield this.supabase.from("habit_businesses").select("*").eq("id",r).eq("user_id",e.id).single();if(o||!s)throw new Error("Habit-business not found");let n=this.getLocalDateString(),i=s.last_completed_at?this.getLocalDateString(new Date(s.last_completed_at)):null,a=s.current_progress||0;if((s.goal_value||1)>1&&console.log(`\u{1F50D} Multi-completion check: ${s.business_name} (${a}/${s.goal_value||1})`),s.frequency==="daily"&&i!==n)a=0;else if(s.frequency==="weekly"&&i){let f=new Date,S=new Date(s.last_completed_at),m=new Date(f),k=m.getDay(),F=k===0?6:k-1;m.setDate(m.getDate()-F),m.setHours(0,0,0,0);let O=new Date(S),N=O.getDay(),W=N===0?6:N-1;O.setDate(O.getDate()-W),O.setHours(0,0,0,0),m.getTime()!==O.getTime()&&(a=0)}let d=s.goal_value||1;if(a>=d)throw new Error(`Goal already completed! You've done ${a}/${d} for today.`);a+=1;let h=new Date,l=s.streak,c=a>=d;if(c)if(s.last_completed_at){let f=new Date(s.last_completed_at),S=h.getTime()-f.getTime(),m=Math.floor(S/(1e3*3600*24));s.frequency==="daily"&&m===1||s.frequency==="weekly"&&m>=7&&m<14?l+=1:m>(s.frequency==="daily"?1:7)?l=1:l+=1}else l=1;let p=c&&l>1?(l-1)*.1:0,_=s.earnings_per_completion,u=_*p,b=_+u,w=0,y=null;if(c){let{data:f,error:S}=yield this.supabase.from("business_stocks").select(`
            id,
            shares_owned_by_owner,
            total_shares_issued,
            stock_holdings (
              shares_owned,
              holder_id
            )
          `).eq("habit_business_id",r).single();if(!S&&f){y=f.id;let k=(f.total_shares_issued-f.shares_owned_by_owner)/f.total_shares_issued*100,F=Math.floor(k/10)*5;w=b*(F/100)}}let E=b+w,{data:C,error:v}=yield this.supabase.from("habit_completions").insert({habit_business_id:r,user_id:e.id,earnings:E,streak_count:l}).select().single();if(v)throw v;if(c)try{console.log("\u{1F4B0} Processing dividends for completed habit:",r);let{data:f,error:S}=yield this.supabase.from("business_stocks").select("id, total_shares_issued, shares_owned_by_owner, current_stock_price").eq("habit_business_id",r).single();if(S)console.warn("\u26A0\uFE0F No stock info found for business:",S.message);else if(f){let m=f.total_shares_issued-f.shares_owned_by_owner;if(console.log(`\u{1F4CA} Stock info: total_shares=${f.total_shares_issued}, owner_shares=${f.shares_owned_by_owner}, investor_shares=${m}, stock_price=$${f.current_stock_price}`),m>0)try{let{error:k}=yield this.supabase.rpc("process_habit_completion_dividends",{completion_uuid:C.id});if(k)throw console.warn("\u26A0\uFE0F RPC function failed:",k.message),k;console.log("\u2705 Dividend payments processed via RPC for habit completion")}catch{console.log("\u{1F504} RPC failed, attempting manual dividend processing..."),yield this.processDividendsManually(r,E,f.id)}else console.log("\u{1F4A1} No external investors - skipping dividend processing")}}catch(f){console.error("\u26A0\uFE0F Warning: Failed to process dividends:",f),console.log("\u{1F4A1} Habit completion succeeded, but dividend processing failed. This is non-critical.")}let q={current_progress:a,total_completions:s.total_completions+1,total_earnings:s.total_earnings+E,last_completed_at:h.toISOString(),updated_at:h.toISOString()};c&&(q.streak=l);let{error:H}=yield this.supabase.from("habit_businesses").update(q).eq("id",r);if(H)throw H;if(c)try{yield this.supabase.rpc("update_stock_price_by_streak",{habit_business_uuid:r}),console.log("\u2705 Stock price updated based on new streak")}catch(f){console.error("\u26A0\uFE0F Warning: Failed to update stock price:",f)}let{data:$,error:T}=yield this.supabase.from("user_profiles").select("cash, net_worth").eq("id",e.id).single();if(T||!$)throw new Error("Could not load user profile");let I=$.cash+E,B=$.net_worth+E,{error:A}=yield this.supabase.from("user_profiles").update({cash:I,net_worth:B,updated_at:h.toISOString()}).eq("id",e.id);if(A)throw new Error("Habit completed but failed to add earnings")}catch(e){throw console.error("Error in completeHabit:",e),e}})}undoHabitCompletion(r){return g(this,null,function*(){try{let{data:{user:e},error:t}=yield this.supabase.auth.getUser();if(t||!e)throw new Error("User not authenticated");let{data:s,error:o}=yield this.supabase.from("habit_businesses").select("*").eq("id",r).eq("user_id",e.id).single();if(o||!s)throw new Error("Habit-business not found");let n=this.getLocalDateString(),i=s.last_completed_at?this.getLocalDateString(new Date(s.last_completed_at)):null;if(console.log("\u{1F4C5} Checking undo eligibility - Today:",n,"Last completed:",i),i!==n)throw new Error("No completion found for today to undo");let a=new Date;a.setHours(0,0,0,0);let d=new Date;d.setHours(23,59,59,999);let h=a.toISOString(),l=d.toISOString();console.log("\u{1F50D} Looking for completion between:",h,"and",l);let{data:c,error:p}=yield this.supabase.from("habit_completions").select("*").eq("habit_business_id",r).eq("user_id",e.id).gte("completed_at",h).lte("completed_at",l).order("completed_at",{ascending:!1}).limit(1).single();if(p||!c){console.error("\u274C Completion lookup error:",p),console.log("\u{1F50D} Checking all recent completions for debugging...");let{data:T}=yield this.supabase.from("habit_completions").select("*").eq("habit_business_id",r).eq("user_id",e.id).order("completed_at",{ascending:!1}).limit(5);throw console.log("\u{1F4CA} Recent completions found:",T),new Error("Could not find today's completion record")}let _=Math.max(0,s.streak-1),{data:u,error:b}=yield this.supabase.from("habit_completions").select("completed_at").eq("habit_business_id",r).eq("user_id",e.id).neq("id",c.id).order("completed_at",{ascending:!1}).limit(1).single(),w=Math.max(0,(s.current_progress||0)-1),{error:y}=yield this.supabase.from("habit_businesses").update({streak:_,current_progress:w,total_completions:Math.max(0,s.total_completions-1),total_earnings:Math.max(0,s.total_earnings-c.earnings),last_completed_at:u?.completed_at||null,updated_at:new Date().toISOString()}).eq("id",r);if(console.log(`\u21A9\uFE0F Undoing completion: progress ${s.current_progress} \u2192 ${w}`),y)throw y;let{data:E,error:C}=yield this.supabase.from("user_profiles").select("cash, net_worth").eq("id",e.id).single();if(C||!E)throw new Error("Could not load user profile");let v=Math.max(0,E.cash-c.earnings),q=Math.max(0,E.net_worth-c.earnings),{error:H}=yield this.supabase.from("user_profiles").update({cash:v,net_worth:q,updated_at:new Date().toISOString()}).eq("id",e.id);if(H)throw new Error("Failed to remove earnings from cash");let{error:$}=yield this.supabase.from("habit_completions").delete().eq("id",c.id);$&&console.error("Error deleting completion record:",$)}catch(e){throw console.error("Error in undoHabitCompletion:",e),e}})}getTodaysHabits(r){return g(this,null,function*(){try{let e=new Date().toISOString().split("T")[0],{data:t,error:s}=yield this.supabase.from("habit_businesses").select(`
          *,
          business_types (
            id,
            name,
            icon,
            base_cost,
            base_pay,
            description
          )
        `).eq("user_id",r).eq("is_active",!0).eq("frequency","daily").or(`last_completed_at.is.null,last_completed_at.lt.${e}`).order("created_at",{ascending:!1});if(s)throw console.error("Error fetching today's habits:",s),s;return t||[]}catch(e){throw console.error("Error in getTodaysHabits:",e),e}})}processDividendsManually(r,e,t){return g(this,null,function*(){try{console.log("\u{1F527} Manual dividend processing for business:",r);let{data:s,error:o}=yield this.supabase.from("stock_holdings").select("*").eq("stock_id",t).gt("shares_owned",0);if(o)throw o;if(!s||s.length===0){console.log("\u{1F4A1} No stockholders found for dividend distribution");return}let{data:n,error:i}=yield this.supabase.from("business_stocks").select("total_shares_issued, shares_owned_by_owner").eq("id",t).single();if(i||!n)throw new Error("Could not get stock information");let a=n.total_shares_issued-n.shares_owned_by_owner,d=a/n.total_shares_issued,h=Math.floor(d*10)*.05,l=e*h,c=l*.5;if(console.log(`\u{1F4B0} Dividend calculation: total_earnings=${e}, ownership=${(d*100).toFixed(1)}%, boost=${l.toFixed(2)}, pool=${c.toFixed(2)}`),c<=0){console.log("\u{1F4A1} No dividend pool to distribute");return}let p=c/a;for(let _ of s){let u=_.shares_owned*p;console.log(`\u{1F4B8} Paying ${u.toFixed(2)} dividend to holder ${_.holder_id} (${_.shares_owned} shares)`);let{error:b}=yield this.supabase.from("stock_dividend_distributions").insert({dividend_payment_id:`manual-${r}-${Date.now()}`,stockholder_id:_.holder_id,shares_owned:_.shares_owned,dividend_per_share:p,total_dividend:u});if(b){console.error("Error recording dividend distribution:",b);continue}let{data:w,error:y}=yield this.supabase.from("user_profiles").select("cash, net_worth").eq("id",_.holder_id).single();if(y||!w){console.error("Error getting stockholder profile:",y);continue}let E=w.cash+u,C=w.net_worth+u,{error:v}=yield this.supabase.from("user_profiles").update({cash:E,net_worth:C,updated_at:new Date().toISOString()}).eq("id",_.holder_id);if(v){console.error("Error updating stockholder cash:",v);continue}let{error:q}=yield this.supabase.from("stock_holdings").update({total_dividends_earned:_.total_dividends_earned+u,updated_at:new Date().toISOString()}).eq("id",_.id);q&&console.error("Error updating holding dividends:",q)}console.log("\u2705 Manual dividend processing completed")}catch(s){throw console.error("\u274C Error in manual dividend processing:",s),s}})}distributeDividends(r,e){return g(this,null,function*(){try{let{data:t,error:s}=yield this.supabase.from("stock_holdings").select("*").eq("stock_id",r).gt("shares_owned",0);if(s)throw s;if(!t||t.length===0)return;let o=t.reduce((i,a)=>i+a.shares_owned,0);if(o===0)return;let n=e/o;for(let i of t){let a=i.shares_owned*n,{error:d}=yield this.supabase.from("stock_dividend_distributions").insert({dividend_payment_id:r,stockholder_id:i.holder_id,shares_owned:i.shares_owned,dividend_per_share:n,total_dividend:a});if(d){console.error("Error recording dividend distribution:",d);continue}let{data:h,error:l}=yield this.supabase.from("user_profiles").select("cash").eq("id",i.holder_id).single();if(!l&&h){let{error:p}=yield this.supabase.from("user_profiles").update({cash:h.cash+a,updated_at:new Date().toISOString()}).eq("id",i.holder_id);p&&console.error("Error updating stockholder cash:",p)}let{error:c}=yield this.supabase.from("stock_holdings").update({total_dividends_earned:i.total_dividends_earned+a,updated_at:new Date().toISOString()}).eq("id",i.id);c&&console.error("Error updating holding dividends:",c)}}catch(t){throw console.error("Error in distributeDividends:",t),t}})}sellStockShares(r,e){return g(this,null,function*(){try{let{data:t}=yield this.supabase.auth.getUser();if(!t.user)throw new Error("User not authenticated");let{data:s,error:o}=yield this.supabase.rpc("sell_stock_shares",{seller_id:t.user.id,stock_uuid:r,shares_to_sell:e});if(o)throw o;return s}catch(t){throw console.error("Error selling stock shares:",t),t}})}updateStockPrice(r){return g(this,null,function*(){try{let{data:e,error:t}=yield this.supabase.rpc("update_stock_price_by_streak",{habit_business_uuid:r});if(t)throw t;return e||0}catch(e){throw console.error("Error updating stock price:",e),e}})}calculateUpgradeOptions(r){return g(this,null,function*(){try{let{data:e,error:t}=yield this.supabase.from("habit_businesses").select(`
          *,
          business_types (
            id,
            name,
            icon,
            base_cost,
            base_pay,
            description
          )
        `).eq("id",r).single();if(t||!e)throw new Error("Habit business not found");let s=yield this.getBusinessTypes(),o=Math.max(1,e.streak),n=e.earnings_per_completion*o,i=n*e.streak*30,a=s.filter(h=>h.base_cost>(e.business_types?.base_cost||0)),d=a.map(h=>{let l=h.base_cost,c=i-l,p=i>=l;return{businessType:h,upgradeCost:l,profitFromUpgrade:c,canAfford:p}});return{currentBusinessValue:n,streakMultiplier:o,totalStreakValue:i,availableUpgrades:a,upgradeOptions:d}}catch(e){throw console.error("Error in calculateUpgradeOptions:",e),e}})}upgradeBusiness(r,e,t,s){return g(this,null,function*(){try{let{data:{user:o},error:n}=yield this.supabase.auth.getUser();if(n||!o)throw new Error("User not authenticated");let i=yield this.calculateUpgradeOptions(r),a=i.upgradeOptions.find(_=>_.businessType.id===e);if(!a||!a.canAfford)throw new Error("Cannot afford this upgrade");let{data:d,error:h}=yield this.supabase.from("habit_businesses").select("*").eq("id",r).single();if(h||!d)throw new Error("Old business not found");let l=yield this.createHabitBusiness({business_type_id:e,business_name:t,habit_description:s,frequency:d.frequency,goal_value:d.goal_value||1}),{error:c}=yield this.supabase.from("business_upgrades").insert({user_id:o.id,old_habit_business_id:r,new_habit_business_id:l.id,old_business_type_id:d.business_type_id,new_business_type_id:e,streak_value_sold:i.totalStreakValue,upgrade_cost:a.upgradeCost,profit_from_upgrade:a.profitFromUpgrade,old_streak_count:d.streak});if(c&&console.error("Error recording upgrade:",c),a.profitFromUpgrade>0){let{data:_,error:u}=yield this.supabase.from("user_profiles").select("cash").eq("id",o.id).single();if(!u&&_){let{error:b}=yield this.supabase.from("user_profiles").update({cash:_.cash+a.profitFromUpgrade,updated_at:new Date().toISOString()}).eq("id",o.id);b&&console.error("Error adding upgrade profit:",b)}}let{error:p}=yield this.supabase.from("habit_businesses").update({is_active:!1,updated_at:new Date().toISOString()}).eq("id",r);return p&&console.error("Error deactivating old business:",p),l}catch(o){throw console.error("Error in upgradeBusiness:",o),o}})}getUserStockHoldings(r){return g(this,null,function*(){try{let{data:e,error:t}=yield this.supabase.from("stock_holdings").select(`
          *,
          business_stocks (
            id,
            habit_business_id,
            business_owner_id,
            current_stock_price,
            total_shares_issued,
            shares_owned_by_owner,
            shares_available,
            price_multiplier,
            habit_businesses (
              id,
              business_name,
              business_icon,
              streak,
              business_types (
                name,
                icon
              )
            )
          )
        `).eq("holder_id",r).gt("shares_owned",0);if(t)throw console.error("Error fetching stock holdings:",t),t;return e||[]}catch(e){throw console.error("Error in getUserStockHoldings:",e),e}})}getAvailableStocks(r){return g(this,null,function*(){try{let{data:e,error:t}=yield this.supabase.from("business_stocks").select(`
          *,
          habit_businesses (
            id,
            business_name,
            business_icon,
            streak,
            user_id,
            business_types (
              name,
              icon
            )
          )
        `).gt("shares_available",0).neq("business_owner_id",r);if(t)throw console.error("Error fetching available stocks:",t),t;return e||[]}catch(e){throw console.error("Error in getAvailableStocks:",e),e}})}purchaseStock(r,e){return g(this,null,function*(){try{let{data:{user:t},error:s}=yield this.supabase.auth.getUser();if(s||!t)throw new Error("User not authenticated");let{data:o,error:n}=yield this.supabase.from("business_stocks").select("*").eq("id",r).single();if(n||!o)throw new Error("Stock not found");if(o.shares_available<e)throw new Error("Not enough shares available");let i=o.current_stock_price*e,{data:a,error:d}=yield this.supabase.from("user_profiles").select("cash").eq("id",t.id).single();if(d||!a)throw new Error("Could not load user profile");if(a.cash<i)throw new Error(`Insufficient funds. Need $${i}, but you only have $${a.cash}`);let{data:h,error:l}=yield this.supabase.from("stock_holdings").select("*").eq("holder_id",t.id).eq("stock_id",r).single();if(l&&l.code!=="PGRST116")throw l;if(h){let u=h.shares_owned+e,b=h.total_invested+i,w=b/u,{error:y}=yield this.supabase.from("stock_holdings").update({shares_owned:u,total_invested:b,average_purchase_price:w,updated_at:new Date().toISOString()}).eq("id",h.id);if(y)throw y}else{let{error:u}=yield this.supabase.from("stock_holdings").insert({holder_id:t.id,stock_id:r,shares_owned:e,average_purchase_price:o.current_stock_price,total_invested:i});if(u)throw u}let{error:c}=yield this.supabase.from("business_stocks").update({shares_available:o.shares_available-e,updated_at:new Date().toISOString()}).eq("id",r);if(c)throw c;let{error:p}=yield this.supabase.from("stock_transactions").insert({stock_id:r,buyer_id:t.id,seller_id:null,shares_traded:e,price_per_share:o.current_stock_price,total_cost:i,transaction_type:"purchase"});p&&console.error("Error recording transaction:",p);let{error:_}=yield this.supabase.from("user_profiles").update({cash:a.cash-i,updated_at:new Date().toISOString()}).eq("id",t.id);if(_)throw new Error("Stock purchased but failed to deduct payment")}catch(t){throw console.error("Error in purchaseStock:",t),t}})}getTodaysActualEarnings(r){return g(this,null,function*(){try{let e=new Date,t=new Date(e.getFullYear(),e.getMonth(),e.getDate()),s=new Date(t.getTime()+24*60*60*1e3);console.log(`\u{1F4CA} Fetching habit earnings for ${r} between ${t.toISOString()} and ${s.toISOString()}`);let{data:o,error:n}=yield this.supabase.from("habit_completions").select("earnings, completed_at").eq("user_id",r).gte("completed_at",t.toISOString()).lt("completed_at",s.toISOString());if(n)throw console.error("Error fetching today's actual earnings:",n),n;let i=o?.reduce((a,d)=>a+d.earnings,0)||0;return console.log(`\u{1F4B0} Today's habit earnings for user: $${i.toFixed(2)} (${o?.length||0} completions)`),i}catch(e){throw console.error("Error in getTodaysActualEarnings:",e),e}})}getTodaysStockDividends(r){return g(this,null,function*(){try{let e=new Date,t=new Date(e.getFullYear(),e.getMonth(),e.getDate()),s=new Date(t.getTime()+24*60*60*1e3);console.log(`\u{1F4CA} Fetching stock dividends for ${r} between ${t.toISOString()} and ${s.toISOString()}`);let{data:o,error:n}=yield this.supabase.from("stock_dividend_distributions").select("total_dividend, created_at").eq("stockholder_id",r).gte("created_at",t.toISOString()).lt("created_at",s.toISOString());if(n)throw console.error("Error fetching today's stock dividends:",n),n;let i=o?.reduce((a,d)=>a+d.total_dividend,0)||0;console.log(`\u{1F4B0} Today's stock dividends for user: $${i.toFixed(2)} (${o?.length||0} distributions)`),o&&o.length>0&&(console.log("\u{1F50D} Individual dividend payments received today:"),o.forEach((a,d)=>{console.log(`  ${d+1}. $${a.total_dividend.toFixed(4)} received at ${a.created_at}`)}));try{let a=yield this.getUserStockHoldings(r);a.length>0?console.log(`\u{1F4C8} User has ${a.length} stock holdings that could generate dividends:`,a.map(d=>`${d.business_stocks?.habit_businesses?.business_name}: ${d.shares_owned} shares`)):console.log("\u2139\uFE0F User has no stock holdings - dividends will always be $0")}catch(a){console.warn("Could not fetch holdings for dividend debugging:",a)}return i}catch(e){throw console.error("Error in getTodaysStockDividends:",e),e}})}getDividendSystemDebugInfo(r){return g(this,null,function*(){try{let e=yield this.getUserStockHoldings(r),{data:t}=yield this.supabase.from("business_stocks").select(`
          *,
          habit_businesses!inner (
            id,
            business_name,
            user_id
          )
        `).eq("habit_businesses.user_id",r),s=yield this.getTodaysStockDividends(r),{data:o}=yield this.supabase.from("stock_dividend_distributions").select("*").eq("stockholder_id",r).order("created_at",{ascending:!1}).limit(10);return{userHoldings:e||[],ownedBusinessStocks:t||[],todaysDividends:s,recentDividendDistributions:o||[]}}catch(e){throw console.error("Error getting dividend debug info:",e),e}})}createTestDividend(r,e=5){return g(this,null,function*(){try{let{error:t}=yield this.supabase.from("stock_dividend_distributions").insert({dividend_payment_id:`test-${Date.now()}`,stockholder_id:r,shares_owned:10,dividend_per_share:e/10,total_dividend:e});if(t)throw t;console.log(`\u2705 Created test dividend of $${e} for user ${r}`)}catch(t){throw console.error("Error creating test dividend:",t),t}})}resetOutdatedDailyHabits(){return g(this,null,function*(){try{console.log("\u{1F504} Checking for outdated daily habits to reset...");let{data:r,error:e}=yield this.supabase.rpc("reset_outdated_daily_habits");if(e){console.error("Error resetting outdated daily habits:",e);return}if(r&&r.length>0){console.log(`\u2705 Reset ${r.length} outdated daily habit(s):`,r);for(let t of r)try{yield this.supabase.rpc("update_stock_price_by_streak",{habit_business_uuid:t.id}),console.log(`\u{1F4C8} Updated stock price for habit: ${t.business_name}`)}catch(s){console.error(`\u26A0\uFE0F Failed to update stock price for habit ${t.id}:`,s)}}else console.log("\u2705 No daily habits needed resetting")}catch(r){console.error("Error in resetOutdatedDailyHabits:",r)}})}checkUserHabitsNeedReset(r){return g(this,null,function*(){try{let{data:e,error:t}=yield this.supabase.rpc("check_user_habits_need_reset",{user_uuid:r});return t?(console.error("Error checking user habits reset status:",t),[]):e||[]}catch(e){return console.error("Error in checkUserHabitsNeedReset:",e),[]}})}getFriendBusinesses(r){return g(this,null,function*(){try{let{data:e,error:t}=yield this.supabase.rpc("get_friend_businesses_for_stocks",{user_uuid:r});return t?(console.error("Error loading friend businesses for stocks:",t),[]):(e||[]).map(s=>({id:s.business_id,businessName:s.business_name,businessIcon:s.business_icon,ownerName:s.owner_name,ownerId:s.owner_id,streak:s.streak||0,frequency:s.frequency,goalValue:s.goal_value||1,currentProgress:s.current_progress||0,earningsPerCompletion:s.earnings_per_completion||0,stockId:s.stock_id,stockPrice:s.stock_price,basePrice:s.base_price||100,priceMultiplier:s.price_multiplier||1,sharesAvailable:s.shares_available||200,totalShares:s.total_shares||1e3,potentialDividend:s.potential_dividend||0}))}catch(e){return console.error("Error in getFriendBusinesses:",e),[]}})}getUserStockPortfolio(r){return g(this,null,function*(){console.log("\u{1F50D} Loading portfolio for userId:",r),console.log("\u{1F50D} User ID type:",typeof r),console.log("\u{1F50D} User ID length:",r?.length);try{console.log("\u{1F50D} About to call RPC function...");let{data:e,error:t}=yield this.supabase.rpc("get_user_stock_portfolio",{user_uuid:r});if(console.log("\u{1F50D} Portfolio RPC response:",{data:e,error:t}),console.log("\u{1F50D} Data type:",typeof e),console.log("\u{1F50D} Data is array:",Array.isArray(e)),console.log("\u{1F50D} Data length:",e?.length),console.log("\u{1F50D} Raw data:",JSON.stringify(e,null,2)),t)return console.error("\u274C Error loading stock portfolio:",t),console.error("\u274C Error details:",t.message,t.code,t.hint),console.error("\u274C Full error object:",JSON.stringify(t,null,2)),[];if(console.log("\u{1F50D} Portfolio data length:",e?.length||0),!e||e.length===0){console.log("\u26A0\uFE0F No portfolio data returned - checking if transactions exist...");let{data:o,error:n}=yield this.supabase.from("stock_transactions").select("*").eq("buyer_id",r).eq("transaction_type","purchase");console.log("\u{1F50D} Raw transactions check:",{rawTransactions:o,transactionsError:n}),console.log("\u{1F50D} Found",o?.length||0,"transactions for user"),console.log("\u{1F50D} Testing direct RPC call...");let{data:i,error:a}=yield this.supabase.rpc("get_user_stock_portfolio",{user_uuid:"cf12469a-d7a2-40ef-82ca-21e8ade1d69b"});return console.log("\u{1F50D} Test RPC result:",{testData:i,testError:a}),[]}let s=(e||[]).map(o=>(console.log("\u{1F50D} Portfolio holding raw data:",o),{id:o.holding_id,stockId:o.stock_id,businessId:o.business_id,businessName:o.business_name,businessIcon:o.business_icon,ownerName:o.owner_name,ownerId:o.owner_id||o.business_owner_id,sharesOwned:o.shares_owned,averagePurchasePrice:o.average_purchase_price,currentPrice:o.current_stock_price,totalInvested:o.total_invested,currentValue:o.current_value,profitLoss:o.profit_loss,totalDividendsEarned:o.total_dividends_earned,dailyDividendRate:o.daily_dividend_rate,businessStreak:o.business_streak}));return console.log("\u{1F50D} Mapped portfolio data:",s),s}catch(e){return console.error("\u274C Error in getUserStockPortfolio:",e),console.error("\u274C Full error object:",JSON.stringify(e,null,2)),[]}})}purchaseStockShares(r,e){return g(this,null,function*(){try{let{data:{user:t},error:s}=yield this.supabase.auth.getUser();if(s||!t)throw new Error("User not authenticated");let{data:o,error:n}=yield this.supabase.rpc("purchase_stock_shares",{buyer_id:t.id,stock_uuid:r,shares_to_buy:e});if(n)throw console.error("Error purchasing stock shares:",n),n;if(!o.success)throw new Error(o.error);return o}catch(t){throw console.error("Error in purchaseStockShares:",t),t}})}createBusinessStock(r){return g(this,null,function*(){try{let{data:e,error:t}=yield this.supabase.rpc("create_business_stock",{habit_business_uuid:r});if(t)throw console.error("Error creating business stock:",t),t;return e}catch(e){throw console.error("Error in createBusinessStock:",e),e}})}fixAllStockPrices(){return g(this,null,function*(){try{console.log("\u{1F527} Starting comprehensive stock price fix..."),console.log("\u{1F527} Running database fixes...");let{error:r}=yield this.supabase.rpc("execute_sql",{sql:`
          -- Fix earnings_per_completion for businesses with incorrect values
          UPDATE habit_businesses 
          SET earnings_per_completion = CASE
              WHEN earnings_per_completion > (
                  SELECT base_pay 
                  FROM business_types bt 
                  WHERE bt.id = habit_businesses.business_type_id
              ) THEN (
                  SELECT base_pay 
                  FROM business_types bt 
                  WHERE bt.id = habit_businesses.business_type_id
              )
              WHEN earnings_per_completion < 0.01 THEN GREATEST(0.01, (
                  SELECT base_pay / 100
                  FROM business_types bt 
                  WHERE bt.id = habit_businesses.business_type_id
              ))
              ELSE earnings_per_completion
          END;

          -- Update stock prices to be reasonable (base_cost * 0.1 * multiplier)
          UPDATE business_stocks 
          SET current_stock_price = ROUND(
              (bt.base_cost * 0.1) * COALESCE(price_multiplier, 1.0), 2
          ),
          last_price_update = NOW()
          FROM habit_businesses hb
          JOIN business_types bt ON hb.business_type_id = bt.id
          WHERE business_stocks.habit_business_id = hb.id;
        `});r&&console.warn("SQL fix failed, continuing with individual updates:",r);let{data:e,error:t}=yield this.supabase.from("habit_businesses").select("id").eq("is_active",!0);if(t)throw t;console.log(`\u{1F527} Updating stock prices for ${e?.length||0} businesses...`);for(let s of e||[])try{yield this.supabase.rpc("update_stock_price_by_streak",{habit_business_uuid:s.id}),console.log(`\u2705 Updated stock price for business ${s.id}`)}catch(o){console.warn(`\u26A0\uFE0F Failed to update stock price for business ${s.id}:`,o)}console.log("\u{1F389} Comprehensive stock price fix complete!")}catch(r){throw console.error("Error in fixAllStockPrices:",r),r}})}fixLemonadeStockPrices(){return g(this,null,function*(){try{console.log("\u{1F34B} Fixing lemonade stock prices...");let{data:r,error:e}=yield this.supabase.from("habit_businesses").select("id").or("business_icon.eq.\u{1F34B},earnings_per_completion.eq.1.00").eq("is_active",!0);if(e)throw e;if(!r||r.length===0){console.log("No lemonade businesses found");return}let t=r.map(o=>o.id);console.log(`Found ${t.length} lemonade businesses:`,t);let{error:s}=yield this.supabase.from("business_stocks").update({current_stock_price:1,price_multiplier:1,last_price_update:new Date().toISOString()}).in("habit_business_id",t);if(s)throw s;console.log("\u2705 Lemonade stock prices fixed!")}catch(r){throw console.error("Error in fixLemonadeStockPrices:",r),r}})}calculatePotentialDividend(r,e,t,s){let o=r*.1,n=Math.min(1+e*.01,2),i=t>=s?1.5:1;return o*n*i/100}getHabitCompletionHistory(r,e=30){return g(this,null,function*(){try{console.log("\u{1F50D} getHabitCompletionHistory called with:",{businessId:r,days:e});let t,s;if(e===365){let c=new Date().getFullYear();t=new Date(c,0,1),s=new Date(c,11,31,23,59,59),console.log("\u{1F4C5} Using calendar year mode for 365 days")}else s=new Date,t=new Date,t.setDate(t.getDate()-e),console.log("\u{1F4C5} Using sliding window mode for",e,"days");console.log("\u{1F4C5} Date range:",{startDate:this.getLocalDateString(t),endDate:this.getLocalDateString(s),mode:e===365?"calendar-year":"sliding-window"});let{data:o,error:n}=yield this.supabase.from("habit_completions").select("id, completed_at, streak_count, earnings, habit_business_id").eq("habit_business_id",r).gte("completed_at",t.toISOString()).lte("completed_at",s.toISOString()).order("completed_at",{ascending:!0});if(n)return console.error("\u274C Error fetching habit completions:",n),[];if(console.log("\u{1F4CA} Raw completion data from Supabase:",o),console.log("\u{1F4C8} Number of completion records found:",o?.length||0),o&&o.length>0){let c=[...new Set(o.map(u=>u.habit_business_id))];console.log("\u{1F50D} Business IDs found in completion data:",c),console.log("\u{1F3AF} Requested business ID:",r),console.log("\u2705 Filtering match:",c.includes(r)?"YES":"NO");let p=o.filter(u=>u.habit_business_id===r);console.log("\u{1F4C5} Completion dates for business",r.substring(0,8)+"...:",p.map(u=>({id:u.id,date:u.completed_at,streak:u.streak_count,earnings:u.earnings,business_id:u.habit_business_id})));let _=[...new Set(p.map(u=>u.completed_at?.split("T")[0]))];console.log("\u{1F4C6} Unique completion dates:",_.length,"dates:",_),console.log("\u{1F50D} ALL completion records in query result:"),o.forEach((u,b)=>{console.log(`  ${b+1}. ID: ${u.id}, Business: ${u.habit_business_id?.substring(0,8)}..., Date: ${u.completed_at?.split("T")[0]}, Earnings: ${u.earnings}`)})}let{data:i}=yield this.supabase.from("habit_completions").select("id, completed_at, streak_count, earnings, habit_business_id").order("completed_at",{ascending:!0});if(console.log("\u{1F30D} TOTAL completion records in database:",i?.length),i&&i.length>0){console.log("\u{1F30D} ALL completion records in database:"),i.forEach((p,_)=>{console.log(`  ${_+1}. ID: ${p.id}, Business: ${p.habit_business_id?.substring(0,8)}..., Date: ${p.completed_at?.split("T")[0]}`)});let c=i.reduce((p,_)=>{let u=_.completed_at?.split("T")[0];return p[u]||(p[u]=[]),p[u].push(_),p},{});Object.entries(c).forEach(([p,_])=>{let u=_;u.length>1&&console.log(`\u26A0\uFE0F Date ${p} has ${u.length} records:`,u.map(b=>({id:b.id,business:b.habit_business_id?.substring(0,8)+"..."})))})}let a=[],d=0,h=Math.ceil((s.getTime()-t.getTime())/(1e3*60*60*24))+1;console.log("\u{1F4CA} Generating date range:",h,"days from",this.getLocalDateString(t),"to",this.getLocalDateString(s));for(let c=0;c<h;c++){let p=new Date(t.getFullYear(),t.getMonth(),t.getDate()+c),_=this.getLocalDateString(p),u=o?.find(y=>y.completed_at&&y.completed_at.startsWith(_)),b=this.getLocalDateString(new Date);(_===b||_==="2025-08-20"||c<5||c>=h-5)&&console.log(`\u{1F50D} Date ${c+1}/${h}: ${_} = ${p.toDateString()}, completion:`,u?"YES":"NO");let w=!!u;w?d=u.streak_count||d+1:d=0,a.push({date:_,completed:w,streakDay:d})}console.log("\u2705 Generated date range with",a.length,"days");let l=a.filter(c=>c.completed);return console.log("\u{1F3AF} Completed days:",l.length),console.log("\u{1F4C5} Completed dates:",l.slice(0,10).map(c=>c.date)),a}catch(t){return console.error("\u{1F4A5} Error in getHabitCompletionHistory:",t),[]}})}getHabitCompletionHistoryForStock(r,e=30){return g(this,null,function*(){try{console.log("\u{1F50D} getHabitCompletionHistoryForStock called with:",{businessId:r,days:e});let t,s;if(e===365){let l=new Date().getFullYear();t=new Date(l,0,1),s=new Date(l,11,31,23,59,59),console.log("\u{1F4C5} Using calendar year mode for 365 days")}else s=new Date,t=new Date,t.setDate(t.getDate()-e),console.log("\u{1F4C5} Using sliding window mode for",e,"days");console.log("\u{1F4C5} Stock completion date range:",{startDate:this.getLocalDateString(t),endDate:this.getLocalDateString(s),mode:e===365?"calendar-year":"sliding-window"}),console.log("\u{1F527} Calling RPC function with params:",{input_uuid:r,start_date:t.toISOString(),end_date:s.toISOString()});let{data:o,error:n}=yield this.supabase.rpc("get_habit_completions_for_stock",{input_uuid:r,start_date:t.toISOString(),end_date:s.toISOString()});if(console.log("\u{1F50D} RPC Response:",{data:o,error:n}),n)return console.error("\u274C Error fetching stock habit completions:",n),console.error("\u274C Error details:",n.message,n.code,n.hint),this.getHabitCompletionHistoryFallback(r,t,s);console.log("\u{1F4CA} Raw stock completion data:",o),console.log("\u{1F4C8} Number of stock completion records found:",o?.length||0),(!o||o.length===0)&&(console.warn("\u26A0\uFE0F No completion data returned for business:",r),console.log("\u{1F4DD} Debugging - params sent:",{input_uuid:r,start_date:t.toISOString(),end_date:s.toISOString()}));let i=[],a=Math.ceil((s.getTime()-t.getTime())/(1e3*60*60*24))+1,d=0;for(let l=0;l<a;l++){let c=new Date(t);c.setDate(t.getDate()+l);let p=this.getLocalDateString(c),_=o?.find(b=>this.getLocalDateString(new Date(b.completed_at))===p),u=!!_;u?d=_.streak_count||d+1:d=0,i.push({date:p,completed:u,streakDay:d})}console.log("\u2705 Generated stock date range with",i.length,"days");let h=i.filter(l=>l.completed);return console.log("\u{1F3AF} Stock completed days:",h.length),i}catch(t){return console.error("\u{1F4A5} Error in getHabitCompletionHistoryForStock:",t),console.log("\u{1F504} Falling back to regular completion history method"),this.getHabitCompletionHistory(r,e)}})}calculateReasonableEarnings(r,e){if(!e||e<=0)return r;let t=r/e,s=r,o=Math.max(.01,r*.01);return Math.min(s,Math.max(o,t))}getHabitCompletionHistoryFallback(r,e,t){return g(this,null,function*(){try{console.log("\u{1F504} Using fallback method for completion history");let{data:s,error:o}=yield this.supabase.from("habit_completions").select("id, completed_at, streak_count, habit_business_id").eq("habit_business_id",r).gte("completed_at",e.toISOString()).lte("completed_at",t.toISOString()).order("completed_at",{ascending:!0});if(o)return console.error("\u274C Fallback query failed:",o),console.log("\u{1F6AB} No demo data - returning empty array"),[];if(console.log("\u{1F4CA} Fallback completion data:",s?.length||0,"records"),!s||s.length===0)return console.log("\u{1F4ED} No completion data found - returning empty array"),[];let n=[],i=Math.ceil((t.getTime()-e.getTime())/(1e3*60*60*24))+1,a=0;for(let d=0;d<i;d++){let h=new Date(e);h.setDate(e.getDate()+d);let l=this.getLocalDateString(h),c=s?.find(_=>this.getLocalDateString(new Date(_.completed_at))===l),p=!!c;p?a=c.streak_count||a+1:a=0,n.push({date:l,completed:p,streakDay:a})}return n}catch(s){return console.error("\u{1F4A5} Error in fallback method:",s),[]}})}};D.\u0275fac=function(e){return new(e||D)},D.\u0275prov=L({token:D,factory:D.\u0275fac,providedIn:"root"});let U=D;return U})();export{V as a};
