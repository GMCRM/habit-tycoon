import{Fa as I,Ga as N,b as R}from"./chunk-7BOSYXOY.js";import{a as M,b as L,j as g}from"./chunk-VI73JOY6.js";var j=(()=>{let D=class D{constructor(){this.supabase=I(N.supabaseUrl,N.supabaseKey)}getBusinessTypes(){return g(this,null,function*(){try{let{data:r,error:e}=yield this.supabase.from("business_types").select("*").order("base_cost",{ascending:!0});if(e)throw console.error("Error fetching business types:",e),e;return r||[]}catch(r){throw console.error("Error in getBusinessTypes:",r),r}})}getUserHabitBusinesses(r){return g(this,null,function*(){try{let{data:e,error:t}=yield this.supabase.from("habit_businesses").select(`
          *,
          business_types (
            id,
            name,
            icon,
            base_cost,
            base_pay,
            description
          )
        `).eq("user_id",r).eq("is_active",!0).order("created_at",{ascending:!1});if(t)throw console.error("Error fetching habit businesses:",t),t;return e||[]}catch(e){throw console.error("Error in getUserHabitBusinesses:",e),e}})}createHabitBusiness(r){return g(this,null,function*(){try{let{data:e,error:t}=yield this.supabase.from("business_types").select("*").eq("id",r.business_type_id).single();if(t||!e)throw new Error("Invalid business type");let{data:{user:o},error:s}=yield this.supabase.auth.getUser();if(s||!o)throw new Error("User not authenticated");let{data:i,error:n}=yield this.supabase.from("user_profiles").select("cash").eq("id",o.id).single();if(n||!i)throw new Error("Could not load user profile");if(i.cash<e.base_cost)throw new Error(`Insufficient funds. Need $${e.base_cost}, but you only have $${i.cash}`);if(r.goal_value<1||r.goal_value>99)throw new Error("Goal value must be between 1 and 99");let a={user_id:o.id,business_type_id:r.business_type_id,business_name:r.business_name,business_icon:e.icon,cost:e.base_cost,habit_description:r.habit_description,frequency:r.frequency,goal_value:r.goal_value,current_progress:0,earnings_per_completion:this.calculateReasonableEarnings(e.base_pay,r.goal_value),streak:0,total_completions:0,total_earnings:0,is_active:!0},{data:c,error:u}=yield this.supabase.from("habit_businesses").insert(a).select().single();if(u)throw console.error("Error creating habit business:",u),u;let l=i.cash-e.base_cost,{error:d}=yield this.supabase.from("user_profiles").update({cash:l,updated_at:new Date().toISOString()}).eq("id",o.id);if(d)throw console.error("Error updating user cash:",d),new Error("Habit-business created but failed to deduct payment");try{yield this.createBusinessStock(c.id),console.log("\u2705 Business stock created for new habit business")}catch(p){console.error("\u26A0\uFE0F Warning: Failed to create business stock:",p)}return c}catch(e){throw console.error("Error in createHabitBusiness:",e),e}})}upgradeHabitBusiness(r,e,t){return g(this,null,function*(){try{let{data:{user:o},error:s}=yield this.supabase.auth.getUser();if(s||!o)throw new Error("User not authenticated");let{data:i,error:n}=yield this.supabase.from("business_types").select("*").eq("id",e).single();if(n||!i)throw new Error("Invalid new business type");let{data:a,error:c}=yield this.supabase.from("user_profiles").select("cash").eq("id",o.id).single();if(c||!a)throw new Error("Could not load user profile");if(a.cash<t)throw new Error(`Insufficient funds. Need $${t}, but you only have $${a.cash}`);let{error:u}=yield this.supabase.from("habit_businesses").update({business_type_id:e,business_icon:i.icon,cost:i.base_cost,earnings_per_completion:this.calculateReasonableEarnings(i.base_pay,1),updated_at:new Date().toISOString()}).eq("id",r).eq("user_id",o.id);if(u)throw console.error("Error updating habit business:",u),u;let l=a.cash-t,{error:d}=yield this.supabase.from("user_profiles").update({cash:l,updated_at:new Date().toISOString()}).eq("id",o.id);if(d)throw console.error("Error updating user cash after upgrade:",d),new Error("Business upgraded but failed to deduct payment");console.log("\u2705 Successfully upgraded habit business")}catch(o){throw console.error("Error in upgradeHabitBusiness:",o),o}})}updateHabitBusiness(r,e){return g(this,null,function*(){try{let{data:{user:t},error:o}=yield this.supabase.auth.getUser();if(o||!t)throw new Error("User not authenticated");let{data:s,error:i}=yield this.supabase.from("habit_businesses").select("*").eq("id",r).eq("user_id",t.id).single();if(i||!s)throw new Error("Habit-business not found or you do not have permission to edit it");if(e.goal_value!==void 0&&(e.goal_value<1||e.goal_value>99))throw new Error("Goal value must be between 1 and 99");let{error:n}=yield this.supabase.from("habit_businesses").update(L(M({},e),{updated_at:new Date().toISOString()})).eq("id",r);if(n)throw console.error("Error updating habit business:",n),n}catch(t){throw console.error("Error in updateHabitBusiness:",t),t}})}deleteHabitBusiness(r){return g(this,null,function*(){try{let{data:{user:e},error:t}=yield this.supabase.auth.getUser();if(t||!e)throw new Error("User not authenticated");let{data:o,error:s}=yield this.supabase.from("habit_businesses").select(`
          *,
          business_types (
            base_cost
          )
        `).eq("id",r).eq("user_id",e.id).eq("is_active",!0).single();if(s||!o)throw new Error("Habit-business not found or you do not have permission to delete it");let{data:i,error:n}=yield this.supabase.from("habit_businesses").select("id").eq("user_id",e.id).eq("is_active",!0);if(n)throw new Error("Could not verify your habit businesses");if(!i||i.length<=1)throw new Error("Cannot delete your only habit business! You must have at least one active business.");let a=o.cost||o.business_types?.base_cost||1,c=Math.floor(a*.7),{error:u}=yield this.supabase.from("habit_businesses").update({is_active:!1,updated_at:new Date().toISOString()}).eq("id",r);if(u)throw console.error("Error deleting habit business:",u),u;let{data:l,error:d}=yield this.supabase.from("user_profiles").select("cash").eq("id",e.id).single();if(d||!l)throw new Error("Could not load user profile");let p=l.cash+c,{error:_}=yield this.supabase.from("user_profiles").update({cash:p,updated_at:new Date().toISOString()}).eq("id",e.id);if(_)throw console.error("Error updating user cash after sale:",_),new Error("Habit business deleted but failed to add sale proceeds");return c}catch(e){throw console.error("Error in deleteHabitBusiness:",e),e}})}getLocalDateString(r=new Date){let e=r.getFullYear(),t=String(r.getMonth()+1).padStart(2,"0"),o=String(r.getDate()).padStart(2,"0");return`${e}-${t}-${o}`}validateNotFutureDate(){let r=new Date,e=new Date(r.getTime()+r.getTimezoneOffset()*6e4),t=this.getLocalDateString(r),o=this.getLocalDateString(e);if(t>o){console.warn("\u26A0\uFE0F Local date appears to be ahead of UTC. Local:",t,"UTC:",o);let s=new Date(t+"T00:00:00"),i=new Date(o+"T00:00:00");if(Math.floor((s.getTime()-i.getTime())/(1e3*60*60*24))>1)throw new Error("Cannot complete habits for future dates. Please check your device date/time settings.")}}completeHabit(r){return g(this,null,function*(){try{this.validateNotFutureDate();let{data:{user:e},error:t}=yield this.supabase.auth.getUser();if(t||!e)throw new Error("User not authenticated");let{data:o,error:s}=yield this.supabase.from("habit_businesses").select("*").eq("id",r).eq("user_id",e.id).single();if(s||!o)throw new Error("Habit-business not found");let i=this.getLocalDateString(),n=o.last_completed_at?this.getLocalDateString(new Date(o.last_completed_at)):null,a=o.current_progress||0;if((o.goal_value||1)>1&&console.log(`\u{1F50D} Multi-completion check: ${o.business_name} (${a}/${o.goal_value||1})`),o.frequency==="daily"&&n!==i)a=0;else if(o.frequency==="weekly"&&n){let f=new Date,S=new Date(o.last_completed_at),m=new Date(f),k=m.getDay(),F=k===0?6:k-1;m.setDate(m.getDate()-F),m.setHours(0,0,0,0);let $=new Date(S),P=$.getDay(),W=P===0?6:P-1;$.setDate($.getDate()-W),$.setHours(0,0,0,0),m.getTime()!==$.getTime()&&(a=0)}let c=o.goal_value||1;if(a>=c)throw new Error(`Goal already completed! You've done ${a}/${c} for today.`);a+=1;let u=new Date,l=o.streak,d=a>=c;if(d)if(o.last_completed_at){let f=new Date(o.last_completed_at),S=u.getTime()-f.getTime(),m=Math.floor(S/(1e3*3600*24));o.frequency==="daily"&&m===1||o.frequency==="weekly"&&m>=7&&m<14?l+=1:m>(o.frequency==="daily"?1:7)?l=1:l+=1}else l=1;let p=d&&l>1?(l-1)*.1:0,_=o.earnings_per_completion,h=_*p,b=_+h,w=0,y=null;if(d){let{data:f,error:S}=yield this.supabase.from("business_stocks").select(`
            id,
            shares_owned_by_owner,
            total_shares_issued,
            stock_holdings (
              shares_owned,
              holder_id
            )
          `).eq("habit_business_id",r).single();if(!S&&f){y=f.id;let k=(f.total_shares_issued-f.shares_owned_by_owner)/f.total_shares_issued*100,F=Math.floor(k/10)*5;w=b*(F/100)}}let E=b+w,{data:O,error:v}=yield this.supabase.from("habit_completions").insert({habit_business_id:r,user_id:e.id,earnings:E,streak_count:l}).select().single();if(v)throw v;if(d)try{console.log("\u{1F4B0} Processing dividends for completed habit:",r);let{data:f,error:S}=yield this.supabase.from("business_stocks").select("id, total_shares_issued, shares_owned_by_owner, current_stock_price").eq("habit_business_id",r).single();if(S)console.warn("\u26A0\uFE0F No stock info found for business:",S.message);else if(f){let m=f.total_shares_issued-f.shares_owned_by_owner;if(console.log(`\u{1F4CA} Stock info: total_shares=${f.total_shares_issued}, owner_shares=${f.shares_owned_by_owner}, investor_shares=${m}, stock_price=$${f.current_stock_price}`),m>0)try{let{error:k}=yield this.supabase.rpc("process_habit_completion_dividends",{completion_uuid:O.id});if(k)throw console.warn("\u26A0\uFE0F RPC function failed:",k.message),k;console.log("\u2705 Dividend payments processed via RPC for habit completion")}catch{console.log("\u{1F504} RPC failed, attempting manual dividend processing..."),yield this.processDividendsManually(r,E,f.id)}else console.log("\u{1F4A1} No external investors - skipping dividend processing")}}catch(f){console.error("\u26A0\uFE0F Warning: Failed to process dividends:",f),console.log("\u{1F4A1} Habit completion succeeded, but dividend processing failed. This is non-critical.")}let q={current_progress:a,total_completions:o.total_completions+1,total_earnings:o.total_earnings+E,last_completed_at:u.toISOString(),updated_at:u.toISOString()};d&&(q.streak=l);let{error:H}=yield this.supabase.from("habit_businesses").update(q).eq("id",r);if(H)throw H;if(d)try{yield this.supabase.rpc("update_stock_price_by_streak",{habit_business_uuid:r}),console.log("\u2705 Stock price updated based on new streak")}catch(f){console.error("\u26A0\uFE0F Warning: Failed to update stock price:",f)}let{data:C,error:U}=yield this.supabase.from("user_profiles").select("cash, net_worth").eq("id",e.id).single();if(U||!C)throw new Error("Could not load user profile");let x=C.cash+E,B=C.net_worth+E,{error:A}=yield this.supabase.from("user_profiles").update({cash:x,net_worth:B,updated_at:u.toISOString()}).eq("id",e.id);if(A)throw new Error("Habit completed but failed to add earnings")}catch(e){throw console.error("Error in completeHabit:",e),e}})}undoHabitCompletion(r){return g(this,null,function*(){try{let{data:{user:e},error:t}=yield this.supabase.auth.getUser();if(t||!e)throw new Error("User not authenticated");let{data:o,error:s}=yield this.supabase.from("habit_businesses").select("*").eq("id",r).eq("user_id",e.id).single();if(s||!o)throw new Error("Habit-business not found");let i=this.getLocalDateString(),n=o.last_completed_at?this.getLocalDateString(new Date(o.last_completed_at)):null;if(console.log("\u{1F4C5} Checking undo eligibility - Today:",i,"Last completed:",n),n!==i)throw new Error("No completion found for today to undo");let a=new Date;a.setHours(0,0,0,0);let c=new Date;c.setHours(23,59,59,999);let u=a.toISOString(),l=c.toISOString();console.log("\u{1F50D} Looking for completion between:",u,"and",l);let{data:d,error:p}=yield this.supabase.from("habit_completions").select("*").eq("habit_business_id",r).eq("user_id",e.id).gte("completed_at",u).lte("completed_at",l).order("completed_at",{ascending:!1}).limit(1).single();if(p||!d){console.error("\u274C Completion lookup error:",p),console.log("\u{1F50D} Checking all recent completions for debugging...");let{data:U}=yield this.supabase.from("habit_completions").select("*").eq("habit_business_id",r).eq("user_id",e.id).order("completed_at",{ascending:!1}).limit(5);throw console.log("\u{1F4CA} Recent completions found:",U),new Error("Could not find today's completion record")}let _=Math.max(0,o.streak-1),{data:h,error:b}=yield this.supabase.from("habit_completions").select("completed_at").eq("habit_business_id",r).eq("user_id",e.id).neq("id",d.id).order("completed_at",{ascending:!1}).limit(1).single(),w=Math.max(0,(o.current_progress||0)-1),{error:y}=yield this.supabase.from("habit_businesses").update({streak:_,current_progress:w,total_completions:Math.max(0,o.total_completions-1),total_earnings:Math.max(0,o.total_earnings-d.earnings),last_completed_at:h?.completed_at||null,updated_at:new Date().toISOString()}).eq("id",r);if(console.log(`\u21A9\uFE0F Undoing completion: progress ${o.current_progress} \u2192 ${w}`),y)throw y;let{data:E,error:O}=yield this.supabase.from("user_profiles").select("cash, net_worth").eq("id",e.id).single();if(O||!E)throw new Error("Could not load user profile");let v=Math.max(0,E.cash-d.earnings),q=Math.max(0,E.net_worth-d.earnings),{error:H}=yield this.supabase.from("user_profiles").update({cash:v,net_worth:q,updated_at:new Date().toISOString()}).eq("id",e.id);if(H)throw new Error("Failed to remove earnings from cash");let{error:C}=yield this.supabase.from("habit_completions").delete().eq("id",d.id);C&&console.error("Error deleting completion record:",C)}catch(e){throw console.error("Error in undoHabitCompletion:",e),e}})}getTodaysHabits(r){return g(this,null,function*(){try{let e=new Date().toISOString().split("T")[0],{data:t,error:o}=yield this.supabase.from("habit_businesses").select(`
          *,
          business_types (
            id,
            name,
            icon,
            base_cost,
            base_pay,
            description
          )
        `).eq("user_id",r).eq("is_active",!0).eq("frequency","daily").or(`last_completed_at.is.null,last_completed_at.lt.${e}`).order("created_at",{ascending:!1});if(o)throw console.error("Error fetching today's habits:",o),o;return t||[]}catch(e){throw console.error("Error in getTodaysHabits:",e),e}})}processDividendsManually(r,e,t){return g(this,null,function*(){try{console.log("\u{1F527} Manual dividend processing for business:",r);let{data:o,error:s}=yield this.supabase.from("stock_holdings").select("*").eq("stock_id",t).gt("shares_owned",0);if(s)throw s;if(!o||o.length===0){console.log("\u{1F4A1} No stockholders found for dividend distribution");return}let{data:i,error:n}=yield this.supabase.from("business_stocks").select("total_shares_issued, shares_owned_by_owner").eq("id",t).single();if(n||!i)throw new Error("Could not get stock information");let a=i.total_shares_issued-i.shares_owned_by_owner,c=a/i.total_shares_issued,u=Math.floor(c*10)*.05,l=e*u,d=l*.5;if(console.log(`\u{1F4B0} Dividend calculation: total_earnings=${e}, ownership=${(c*100).toFixed(1)}%, boost=${l.toFixed(2)}, pool=${d.toFixed(2)}`),d<=0){console.log("\u{1F4A1} No dividend pool to distribute");return}let p=d/a;for(let _ of o){let h=_.shares_owned*p;console.log(`\u{1F4B8} Paying ${h.toFixed(2)} dividend to holder ${_.holder_id} (${_.shares_owned} shares)`);let{error:b}=yield this.supabase.from("stock_dividend_distributions").insert({dividend_payment_id:`manual-${r}-${Date.now()}`,stockholder_id:_.holder_id,shares_owned:_.shares_owned,dividend_per_share:p,total_dividend:h});if(b){console.error("Error recording dividend distribution:",b);continue}let{data:w,error:y}=yield this.supabase.from("user_profiles").select("cash, net_worth").eq("id",_.holder_id).single();if(y||!w){console.error("Error getting stockholder profile:",y);continue}let E=w.cash+h,O=w.net_worth+h,{error:v}=yield this.supabase.from("user_profiles").update({cash:E,net_worth:O,updated_at:new Date().toISOString()}).eq("id",_.holder_id);if(v){console.error("Error updating stockholder cash:",v);continue}let{error:q}=yield this.supabase.from("stock_holdings").update({total_dividends_earned:_.total_dividends_earned+h,updated_at:new Date().toISOString()}).eq("id",_.id);q&&console.error("Error updating holding dividends:",q)}console.log("\u2705 Manual dividend processing completed")}catch(o){throw console.error("\u274C Error in manual dividend processing:",o),o}})}distributeDividends(r,e){return g(this,null,function*(){try{let{data:t,error:o}=yield this.supabase.from("stock_holdings").select("*").eq("stock_id",r).gt("shares_owned",0);if(o)throw o;if(!t||t.length===0)return;let s=t.reduce((n,a)=>n+a.shares_owned,0);if(s===0)return;let i=e/s;for(let n of t){let a=n.shares_owned*i,{error:c}=yield this.supabase.from("stock_dividend_distributions").insert({dividend_payment_id:r,stockholder_id:n.holder_id,shares_owned:n.shares_owned,dividend_per_share:i,total_dividend:a});if(c){console.error("Error recording dividend distribution:",c);continue}let{data:u,error:l}=yield this.supabase.from("user_profiles").select("cash").eq("id",n.holder_id).single();if(!l&&u){let{error:p}=yield this.supabase.from("user_profiles").update({cash:u.cash+a,updated_at:new Date().toISOString()}).eq("id",n.holder_id);p&&console.error("Error updating stockholder cash:",p)}let{error:d}=yield this.supabase.from("stock_holdings").update({total_dividends_earned:n.total_dividends_earned+a,updated_at:new Date().toISOString()}).eq("id",n.id);d&&console.error("Error updating holding dividends:",d)}}catch(t){throw console.error("Error in distributeDividends:",t),t}})}sellStockShares(r,e){return g(this,null,function*(){try{let{data:t}=yield this.supabase.auth.getUser();if(!t.user)throw new Error("User not authenticated");let{data:o,error:s}=yield this.supabase.rpc("sell_stock_shares",{seller_id:t.user.id,stock_uuid:r,shares_to_sell:e});if(s)throw s;return o}catch(t){throw console.error("Error selling stock shares:",t),t}})}updateStockPrice(r){return g(this,null,function*(){try{let{data:e,error:t}=yield this.supabase.rpc("update_stock_price_by_streak",{habit_business_uuid:r});if(t)throw t;return e||0}catch(e){throw console.error("Error updating stock price:",e),e}})}calculateUpgradeOptions(r){return g(this,null,function*(){try{let{data:e,error:t}=yield this.supabase.from("habit_businesses").select(`
          *,
          business_types (
            id,
            name,
            icon,
            base_cost,
            base_pay,
            description
          )
        `).eq("id",r).single();if(t||!e)throw new Error("Habit business not found");let o=yield this.getBusinessTypes(),s=Math.max(1,e.streak),i=e.earnings_per_completion*s,n=i*e.streak*30,a=o.filter(u=>u.base_cost>(e.business_types?.base_cost||0)),c=a.map(u=>{let l=u.base_cost,d=n-l,p=n>=l;return{businessType:u,upgradeCost:l,profitFromUpgrade:d,canAfford:p}});return{currentBusinessValue:i,streakMultiplier:s,totalStreakValue:n,availableUpgrades:a,upgradeOptions:c}}catch(e){throw console.error("Error in calculateUpgradeOptions:",e),e}})}upgradeBusiness(r,e,t,o){return g(this,null,function*(){try{let{data:{user:s},error:i}=yield this.supabase.auth.getUser();if(i||!s)throw new Error("User not authenticated");let n=yield this.calculateUpgradeOptions(r),a=n.upgradeOptions.find(_=>_.businessType.id===e);if(!a||!a.canAfford)throw new Error("Cannot afford this upgrade");let{data:c,error:u}=yield this.supabase.from("habit_businesses").select("*").eq("id",r).single();if(u||!c)throw new Error("Old business not found");let l=yield this.createHabitBusiness({business_type_id:e,business_name:t,habit_description:o,frequency:c.frequency,goal_value:c.goal_value||1}),{error:d}=yield this.supabase.from("business_upgrades").insert({user_id:s.id,old_habit_business_id:r,new_habit_business_id:l.id,old_business_type_id:c.business_type_id,new_business_type_id:e,streak_value_sold:n.totalStreakValue,upgrade_cost:a.upgradeCost,profit_from_upgrade:a.profitFromUpgrade,old_streak_count:c.streak});if(d&&console.error("Error recording upgrade:",d),a.profitFromUpgrade>0){let{data:_,error:h}=yield this.supabase.from("user_profiles").select("cash").eq("id",s.id).single();if(!h&&_){let{error:b}=yield this.supabase.from("user_profiles").update({cash:_.cash+a.profitFromUpgrade,updated_at:new Date().toISOString()}).eq("id",s.id);b&&console.error("Error adding upgrade profit:",b)}}let{error:p}=yield this.supabase.from("habit_businesses").update({is_active:!1,updated_at:new Date().toISOString()}).eq("id",r);return p&&console.error("Error deactivating old business:",p),l}catch(s){throw console.error("Error in upgradeBusiness:",s),s}})}getUserStockHoldings(r){return g(this,null,function*(){try{let{data:e,error:t}=yield this.supabase.from("stock_holdings").select(`
          *,
          business_stocks (
            id,
            habit_business_id,
            business_owner_id,
            current_stock_price,
            total_shares_issued,
            shares_owned_by_owner,
            shares_available,
            price_multiplier,
            habit_businesses (
              id,
              business_name,
              business_icon,
              streak,
              business_types (
                name,
                icon
              )
            )
          )
        `).eq("holder_id",r).gt("shares_owned",0);if(t)throw console.error("Error fetching stock holdings:",t),t;return e||[]}catch(e){throw console.error("Error in getUserStockHoldings:",e),e}})}getAvailableStocks(r){return g(this,null,function*(){try{let{data:e,error:t}=yield this.supabase.from("business_stocks").select(`
          *,
          habit_businesses (
            id,
            business_name,
            business_icon,
            streak,
            user_id,
            business_types (
              name,
              icon
            )
          )
        `).gt("shares_available",0).neq("business_owner_id",r);if(t)throw console.error("Error fetching available stocks:",t),t;return e||[]}catch(e){throw console.error("Error in getAvailableStocks:",e),e}})}purchaseStock(r,e){return g(this,null,function*(){try{let{data:{user:t},error:o}=yield this.supabase.auth.getUser();if(o||!t)throw new Error("User not authenticated");let{data:s,error:i}=yield this.supabase.from("business_stocks").select("*").eq("id",r).single();if(i||!s)throw new Error("Stock not found");if(s.shares_available<e)throw new Error("Not enough shares available");let n=s.current_stock_price*e,{data:a,error:c}=yield this.supabase.from("user_profiles").select("cash").eq("id",t.id).single();if(c||!a)throw new Error("Could not load user profile");if(a.cash<n)throw new Error(`Insufficient funds. Need $${n}, but you only have $${a.cash}`);let{data:u,error:l}=yield this.supabase.from("stock_holdings").select("*").eq("holder_id",t.id).eq("stock_id",r).single();if(l&&l.code!=="PGRST116")throw l;if(u){let h=u.shares_owned+e,b=u.total_invested+n,w=b/h,{error:y}=yield this.supabase.from("stock_holdings").update({shares_owned:h,total_invested:b,average_purchase_price:w,updated_at:new Date().toISOString()}).eq("id",u.id);if(y)throw y}else{let{error:h}=yield this.supabase.from("stock_holdings").insert({holder_id:t.id,stock_id:r,shares_owned:e,average_purchase_price:s.current_stock_price,total_invested:n});if(h)throw h}let{error:d}=yield this.supabase.from("business_stocks").update({shares_available:s.shares_available-e,updated_at:new Date().toISOString()}).eq("id",r);if(d)throw d;let{error:p}=yield this.supabase.from("stock_transactions").insert({stock_id:r,buyer_id:t.id,seller_id:null,shares_traded:e,price_per_share:s.current_stock_price,total_cost:n,transaction_type:"purchase"});p&&console.error("Error recording transaction:",p);let{error:_}=yield this.supabase.from("user_profiles").update({cash:a.cash-n,updated_at:new Date().toISOString()}).eq("id",t.id);if(_)throw new Error("Stock purchased but failed to deduct payment")}catch(t){throw console.error("Error in purchaseStock:",t),t}})}getTodaysActualEarnings(r){return g(this,null,function*(){try{let e=new Date,t=new Date(e.getFullYear(),e.getMonth(),e.getDate()),o=new Date(t.getTime()+24*60*60*1e3);console.log(`\u{1F4CA} Fetching habit earnings for ${r} between ${t.toISOString()} and ${o.toISOString()}`);let{data:s,error:i}=yield this.supabase.from("habit_completions").select("earnings, completed_at").eq("user_id",r).gte("completed_at",t.toISOString()).lt("completed_at",o.toISOString());if(i)throw console.error("Error fetching today's actual earnings:",i),i;let n=s?.reduce((a,c)=>a+c.earnings,0)||0;return console.log(`\u{1F4B0} Today's habit earnings for user: $${n.toFixed(2)} (${s?.length||0} completions)`),n}catch(e){throw console.error("Error in getTodaysActualEarnings:",e),e}})}getTodaysStockDividends(r){return g(this,null,function*(){try{let e=new Date,t=new Date(e.getFullYear(),e.getMonth(),e.getDate()),o=new Date(t.getTime()+24*60*60*1e3);console.log(`\u{1F4CA} Fetching stock dividends for ${r} between ${t.toISOString()} and ${o.toISOString()}`);let{data:s,error:i}=yield this.supabase.from("stock_dividend_distributions").select("total_dividend, created_at").eq("stockholder_id",r).gte("created_at",t.toISOString()).lt("created_at",o.toISOString());if(i)throw console.error("Error fetching today's stock dividends:",i),i;let n=s?.reduce((a,c)=>a+c.total_dividend,0)||0;console.log(`\u{1F4B0} Today's stock dividends for user: $${n.toFixed(2)} (${s?.length||0} distributions)`),s&&s.length>0&&(console.log("\u{1F50D} Individual dividend payments received today:"),s.forEach((a,c)=>{console.log(`  ${c+1}. $${a.total_dividend.toFixed(4)} received at ${a.created_at}`)}));try{let a=yield this.getUserStockHoldings(r);a.length>0?console.log(`\u{1F4C8} User has ${a.length} stock holdings that could generate dividends:`,a.map(c=>`${c.business_stocks?.habit_businesses?.business_name}: ${c.shares_owned} shares`)):console.log("\u2139\uFE0F User has no stock holdings - dividends will always be $0")}catch(a){console.warn("Could not fetch holdings for dividend debugging:",a)}return n}catch(e){throw console.error("Error in getTodaysStockDividends:",e),e}})}getDividendSystemDebugInfo(r){return g(this,null,function*(){try{let e=yield this.getUserStockHoldings(r),{data:t}=yield this.supabase.from("business_stocks").select(`
          *,
          habit_businesses!inner (
            id,
            business_name,
            user_id
          )
        `).eq("habit_businesses.user_id",r),o=yield this.getTodaysStockDividends(r),{data:s}=yield this.supabase.from("stock_dividend_distributions").select("*").eq("stockholder_id",r).order("created_at",{ascending:!1}).limit(10);return{userHoldings:e||[],ownedBusinessStocks:t||[],todaysDividends:o,recentDividendDistributions:s||[]}}catch(e){throw console.error("Error getting dividend debug info:",e),e}})}createTestDividend(r,e=5){return g(this,null,function*(){try{let{error:t}=yield this.supabase.from("stock_dividend_distributions").insert({dividend_payment_id:`test-${Date.now()}`,stockholder_id:r,shares_owned:10,dividend_per_share:e/10,total_dividend:e});if(t)throw t;console.log(`\u2705 Created test dividend of $${e} for user ${r}`)}catch(t){throw console.error("Error creating test dividend:",t),t}})}resetOutdatedDailyHabits(){return g(this,null,function*(){try{console.log("\u{1F504} Checking for outdated daily habits to reset..."),yield this.cleanupInvalidCompletions();let{data:r,error:e}=yield this.supabase.rpc("reset_outdated_daily_habits");if(e){console.error("Error resetting outdated daily habits:",e);return}if(r&&r.length>0){console.log(`\u2705 Reset ${r.length} outdated daily habit(s):`,r);for(let t of r)try{yield this.supabase.rpc("update_stock_price_by_streak",{habit_business_uuid:t.id}),console.log(`\u{1F4C8} Updated stock price for habit: ${t.business_name}`)}catch(o){console.error(`\u26A0\uFE0F Failed to update stock price for habit ${t.id}:`,o)}}else console.log("\u2705 No daily habits needed resetting")}catch(r){console.error("Error in resetOutdatedDailyHabits:",r)}})}cleanupInvalidCompletions(){return g(this,null,function*(){try{let{data:{user:r},error:e}=yield this.supabase.auth.getUser();if(e||!r)return;let t=new Date,o=new Date(t.getTime()+t.getTimezoneOffset()*6e4),s=new Date(Math.max(t.getTime(),o.getTime()));s.setHours(s.getHours()+6),console.log("\u{1F9F9} Cleaning up completion records after:",s.toISOString());let{data:i,error:n}=yield this.supabase.from("habit_completions").select("id, completed_at, habit_business_id").eq("user_id",r.id).gt("completed_at",s.toISOString());if(n){console.error("Error querying future completions:",n);return}if(i&&i.length>0){console.log(`\u26A0\uFE0F Found ${i.length} future completion records to clean up:`,i.map(c=>({id:c.id,date:c.completed_at,business:c.habit_business_id?.substring(0,8)})));let{error:a}=yield this.supabase.from("habit_completions").delete().in("id",i.map(c=>c.id));if(a)console.error("Error deleting future completions:",a);else{console.log("\u2705 Cleaned up future completion records");let c=[...new Set(i.map(u=>u.habit_business_id))];for(let u of c)if(u){let{error:l}=yield this.supabase.from("habit_businesses").update({current_progress:0,updated_at:new Date().toISOString()}).eq("id",u);l&&console.error("Error resetting progress for business:",u,l)}}}}catch(r){console.error("Error in cleanupInvalidCompletions:",r)}})}checkUserHabitsNeedReset(r){return g(this,null,function*(){try{let{data:e,error:t}=yield this.supabase.rpc("check_user_habits_need_reset",{user_uuid:r});return t?(console.error("Error checking user habits reset status:",t),[]):e||[]}catch(e){return console.error("Error in checkUserHabitsNeedReset:",e),[]}})}getFriendBusinesses(r){return g(this,null,function*(){try{let{data:e,error:t}=yield this.supabase.rpc("get_friend_businesses_for_stocks",{user_uuid:r});return t?(console.error("Error loading friend businesses for stocks:",t),[]):(e||[]).map(o=>({id:o.business_id,businessName:o.business_name,businessIcon:o.business_icon,ownerName:o.owner_name,ownerId:o.owner_id,streak:o.streak||0,frequency:o.frequency,goalValue:o.goal_value||1,currentProgress:o.current_progress||0,earningsPerCompletion:o.earnings_per_completion||0,stockId:o.stock_id,stockPrice:o.stock_price,basePrice:o.base_price||100,priceMultiplier:o.price_multiplier||1,sharesAvailable:o.shares_available||200,totalShares:o.total_shares||1e3,potentialDividend:o.potential_dividend||0}))}catch(e){return console.error("Error in getFriendBusinesses:",e),[]}})}getUserStockPortfolio(r){return g(this,null,function*(){console.log("\u{1F50D} Loading portfolio for userId:",r),console.log("\u{1F50D} User ID type:",typeof r),console.log("\u{1F50D} User ID length:",r?.length);try{console.log("\u{1F50D} About to call RPC function...");let{data:e,error:t}=yield this.supabase.rpc("get_user_stock_portfolio",{user_uuid:r});if(console.log("\u{1F50D} Portfolio RPC response:",{data:e,error:t}),console.log("\u{1F50D} Data type:",typeof e),console.log("\u{1F50D} Data is array:",Array.isArray(e)),console.log("\u{1F50D} Data length:",e?.length),console.log("\u{1F50D} Raw data:",JSON.stringify(e,null,2)),t)return console.error("\u274C Error loading stock portfolio:",t),console.error("\u274C Error details:",t.message,t.code,t.hint),console.error("\u274C Full error object:",JSON.stringify(t,null,2)),[];if(console.log("\u{1F50D} Portfolio data length:",e?.length||0),!e||e.length===0){console.log("\u26A0\uFE0F No portfolio data returned - checking if transactions exist...");let{data:s,error:i}=yield this.supabase.from("stock_transactions").select("*").eq("buyer_id",r).eq("transaction_type","purchase");console.log("\u{1F50D} Raw transactions check:",{rawTransactions:s,transactionsError:i}),console.log("\u{1F50D} Found",s?.length||0,"transactions for user"),console.log("\u{1F50D} Testing direct RPC call...");let{data:n,error:a}=yield this.supabase.rpc("get_user_stock_portfolio",{user_uuid:"cf12469a-d7a2-40ef-82ca-21e8ade1d69b"});return console.log("\u{1F50D} Test RPC result:",{testData:n,testError:a}),[]}let o=(e||[]).map(s=>(console.log("\u{1F50D} Portfolio holding raw data:",s),{id:s.holding_id,stockId:s.stock_id,businessId:s.business_id,businessName:s.business_name,businessIcon:s.business_icon,ownerName:s.owner_name,ownerId:s.owner_id||s.business_owner_id,sharesOwned:s.shares_owned,averagePurchasePrice:s.average_purchase_price,currentPrice:s.current_stock_price,totalInvested:s.total_invested,currentValue:s.current_value,profitLoss:s.profit_loss,totalDividendsEarned:s.total_dividends_earned,dailyDividendRate:s.daily_dividend_rate,businessStreak:s.business_streak}));return console.log("\u{1F50D} Mapped portfolio data:",o),o}catch(e){return console.error("\u274C Error in getUserStockPortfolio:",e),console.error("\u274C Full error object:",JSON.stringify(e,null,2)),[]}})}purchaseStockShares(r,e){return g(this,null,function*(){try{let{data:{user:t},error:o}=yield this.supabase.auth.getUser();if(o||!t)throw new Error("User not authenticated");let{data:s,error:i}=yield this.supabase.rpc("purchase_stock_shares",{buyer_id:t.id,stock_uuid:r,shares_to_buy:e});if(i)throw console.error("Error purchasing stock shares:",i),i;if(!s.success)throw new Error(s.error);return s}catch(t){throw console.error("Error in purchaseStockShares:",t),t}})}createBusinessStock(r){return g(this,null,function*(){try{let{data:e,error:t}=yield this.supabase.rpc("create_business_stock",{habit_business_uuid:r});if(t)throw console.error("Error creating business stock:",t),t;return e}catch(e){throw console.error("Error in createBusinessStock:",e),e}})}fixAllStockPrices(){return g(this,null,function*(){try{console.log("\u{1F527} Starting comprehensive stock price fix..."),console.log("\u{1F527} Running database fixes...");let{error:r}=yield this.supabase.rpc("execute_sql",{sql:`
          -- Fix earnings_per_completion for businesses with incorrect values
          UPDATE habit_businesses 
          SET earnings_per_completion = CASE
              WHEN earnings_per_completion > (
                  SELECT base_pay 
                  FROM business_types bt 
                  WHERE bt.id = habit_businesses.business_type_id
              ) THEN (
                  SELECT base_pay 
                  FROM business_types bt 
                  WHERE bt.id = habit_businesses.business_type_id
              )
              WHEN earnings_per_completion < 0.01 THEN GREATEST(0.01, (
                  SELECT base_pay / 100
                  FROM business_types bt 
                  WHERE bt.id = habit_businesses.business_type_id
              ))
              ELSE earnings_per_completion
          END;

          -- Update stock prices to be reasonable (base_cost * 0.1 * multiplier)
          UPDATE business_stocks 
          SET current_stock_price = ROUND(
              (bt.base_cost * 0.1) * COALESCE(price_multiplier, 1.0), 2
          ),
          last_price_update = NOW()
          FROM habit_businesses hb
          JOIN business_types bt ON hb.business_type_id = bt.id
          WHERE business_stocks.habit_business_id = hb.id;
        `});r&&console.warn("SQL fix failed, continuing with individual updates:",r);let{data:e,error:t}=yield this.supabase.from("habit_businesses").select("id").eq("is_active",!0);if(t)throw t;console.log(`\u{1F527} Updating stock prices for ${e?.length||0} businesses...`);for(let o of e||[])try{yield this.supabase.rpc("update_stock_price_by_streak",{habit_business_uuid:o.id}),console.log(`\u2705 Updated stock price for business ${o.id}`)}catch(s){console.warn(`\u26A0\uFE0F Failed to update stock price for business ${o.id}:`,s)}console.log("\u{1F389} Comprehensive stock price fix complete!")}catch(r){throw console.error("Error in fixAllStockPrices:",r),r}})}fixLemonadeStockPrices(){return g(this,null,function*(){try{console.log("\u{1F34B} Fixing lemonade stock prices...");let{data:r,error:e}=yield this.supabase.from("habit_businesses").select("id").or("business_icon.eq.\u{1F34B},earnings_per_completion.eq.1.00").eq("is_active",!0);if(e)throw e;if(!r||r.length===0){console.log("No lemonade businesses found");return}let t=r.map(s=>s.id);console.log(`Found ${t.length} lemonade businesses:`,t);let{error:o}=yield this.supabase.from("business_stocks").update({current_stock_price:1,price_multiplier:1,last_price_update:new Date().toISOString()}).in("habit_business_id",t);if(o)throw o;console.log("\u2705 Lemonade stock prices fixed!")}catch(r){throw console.error("Error in fixLemonadeStockPrices:",r),r}})}calculatePotentialDividend(r,e,t,o){let s=r*.1,i=Math.min(1+e*.01,2),n=t>=o?1.5:1;return s*i*n/100}getHabitCompletionHistory(r,e=30){return g(this,null,function*(){try{console.log("\u{1F50D} getHabitCompletionHistory called with:",{businessId:r,days:e});let t,o;if(e===365){let d=new Date().getFullYear();t=new Date(d,0,1),o=new Date(d,11,31,23,59,59),console.log("\u{1F4C5} Using calendar year mode for 365 days")}else o=new Date,t=new Date,t.setDate(t.getDate()-e),console.log("\u{1F4C5} Using sliding window mode for",e,"days");console.log("\u{1F4C5} Date range:",{startDate:this.getLocalDateString(t),endDate:this.getLocalDateString(o),mode:e===365?"calendar-year":"sliding-window"});let{data:s,error:i}=yield this.supabase.from("habit_completions").select("id, completed_at, streak_count, earnings, habit_business_id").eq("habit_business_id",r).gte("completed_at",t.toISOString()).lte("completed_at",o.toISOString()).order("completed_at",{ascending:!0});if(i)return console.error("\u274C Error fetching habit completions:",i),[];if(console.log("\u{1F4CA} Raw completion data from Supabase:",s),console.log("\u{1F4C8} Number of completion records found:",s?.length||0),s&&s.length>0){let d=[...new Set(s.map(h=>h.habit_business_id))];console.log("\u{1F50D} Business IDs found in completion data:",d),console.log("\u{1F3AF} Requested business ID:",r),console.log("\u2705 Filtering match:",d.includes(r)?"YES":"NO");let p=s.filter(h=>h.habit_business_id===r);console.log("\u{1F4C5} Completion dates for business",r.substring(0,8)+"...:",p.map(h=>({id:h.id,date:h.completed_at,streak:h.streak_count,earnings:h.earnings,business_id:h.habit_business_id})));let _=[...new Set(p.map(h=>h.completed_at?.split("T")[0]))];console.log("\u{1F4C6} Unique completion dates:",_.length,"dates:",_),console.log("\u{1F50D} ALL completion records in query result:"),s.forEach((h,b)=>{console.log(`  ${b+1}. ID: ${h.id}, Business: ${h.habit_business_id?.substring(0,8)}..., Date: ${h.completed_at?.split("T")[0]}, Earnings: ${h.earnings}`)})}let{data:n}=yield this.supabase.from("habit_completions").select("id, completed_at, streak_count, earnings, habit_business_id").order("completed_at",{ascending:!0});if(console.log("\u{1F30D} TOTAL completion records in database:",n?.length),n&&n.length>0){console.log("\u{1F30D} ALL completion records in database:"),n.forEach((p,_)=>{console.log(`  ${_+1}. ID: ${p.id}, Business: ${p.habit_business_id?.substring(0,8)}..., Date: ${p.completed_at?.split("T")[0]}`)});let d=n.reduce((p,_)=>{let h=_.completed_at?.split("T")[0];return p[h]||(p[h]=[]),p[h].push(_),p},{});Object.entries(d).forEach(([p,_])=>{let h=_;h.length>1&&console.log(`\u26A0\uFE0F Date ${p} has ${h.length} records:`,h.map(b=>({id:b.id,business:b.habit_business_id?.substring(0,8)+"..."})))})}let a=[],c=0,u=Math.ceil((o.getTime()-t.getTime())/(1e3*60*60*24))+1;console.log("\u{1F4CA} Generating date range:",u,"days from",this.getLocalDateString(t),"to",this.getLocalDateString(o));for(let d=0;d<u;d++){let p=new Date(t.getFullYear(),t.getMonth(),t.getDate()+d),_=this.getLocalDateString(p),h=s?.find(y=>y.completed_at&&y.completed_at.startsWith(_)),b=this.getLocalDateString(new Date);(_===b||_==="2025-08-20"||d<5||d>=u-5)&&console.log(`\u{1F50D} Date ${d+1}/${u}: ${_} = ${p.toDateString()}, completion:`,h?"YES":"NO");let w=!!h;w?c=h.streak_count||c+1:c=0,a.push({date:_,completed:w,streakDay:c})}console.log("\u2705 Generated date range with",a.length,"days");let l=a.filter(d=>d.completed);return console.log("\u{1F3AF} Completed days:",l.length),console.log("\u{1F4C5} Completed dates:",l.slice(0,10).map(d=>d.date)),a}catch(t){return console.error("\u{1F4A5} Error in getHabitCompletionHistory:",t),[]}})}getHabitCompletionHistoryForStock(r,e=30){return g(this,null,function*(){try{console.log("\u{1F50D} getHabitCompletionHistoryForStock called with:",{businessId:r,days:e});let t,o;if(e===365){let l=new Date().getFullYear();t=new Date(l,0,1),o=new Date(l,11,31,23,59,59),console.log("\u{1F4C5} Using calendar year mode for 365 days")}else o=new Date,t=new Date,t.setDate(t.getDate()-e),console.log("\u{1F4C5} Using sliding window mode for",e,"days");console.log("\u{1F4C5} Stock completion date range:",{startDate:this.getLocalDateString(t),endDate:this.getLocalDateString(o),mode:e===365?"calendar-year":"sliding-window"}),console.log("\u{1F527} Calling RPC function with params:",{input_uuid:r,start_date:t.toISOString(),end_date:o.toISOString()});let{data:s,error:i}=yield this.supabase.rpc("get_habit_completions_for_stock",{input_uuid:r,start_date:t.toISOString(),end_date:o.toISOString()});if(console.log("\u{1F50D} RPC Response:",{data:s,error:i}),i)return console.error("\u274C Error fetching stock habit completions:",i),console.error("\u274C Error details:",i.message,i.code,i.hint),this.getHabitCompletionHistoryFallback(r,t,o);console.log("\u{1F4CA} Raw stock completion data:",s),console.log("\u{1F4C8} Number of stock completion records found:",s?.length||0),(!s||s.length===0)&&(console.warn("\u26A0\uFE0F No completion data returned for business:",r),console.log("\u{1F4DD} Debugging - params sent:",{input_uuid:r,start_date:t.toISOString(),end_date:o.toISOString()}));let n=[],a=Math.ceil((o.getTime()-t.getTime())/(1e3*60*60*24))+1,c=0;for(let l=0;l<a;l++){let d=new Date(t);d.setDate(t.getDate()+l);let p=this.getLocalDateString(d),_=s?.find(b=>this.getLocalDateString(new Date(b.completed_at))===p),h=!!_;h?c=_.streak_count||c+1:c=0,n.push({date:p,completed:h,streakDay:c})}console.log("\u2705 Generated stock date range with",n.length,"days");let u=n.filter(l=>l.completed);return console.log("\u{1F3AF} Stock completed days:",u.length),n}catch(t){return console.error("\u{1F4A5} Error in getHabitCompletionHistoryForStock:",t),console.log("\u{1F504} Falling back to regular completion history method"),this.getHabitCompletionHistory(r,e)}})}calculateReasonableEarnings(r,e){if(!e||e<=0)return r;let t=r/e,o=r,s=Math.max(.01,r*.01);return Math.min(o,Math.max(s,t))}getHabitCompletionHistoryFallback(r,e,t){return g(this,null,function*(){try{console.log("\u{1F504} Using fallback method for completion history");let{data:o,error:s}=yield this.supabase.from("habit_completions").select("id, completed_at, streak_count, habit_business_id").eq("habit_business_id",r).gte("completed_at",e.toISOString()).lte("completed_at",t.toISOString()).order("completed_at",{ascending:!0});if(s)return console.error("\u274C Fallback query failed:",s),console.log("\u{1F6AB} No demo data - returning empty array"),[];if(console.log("\u{1F4CA} Fallback completion data:",o?.length||0,"records"),!o||o.length===0)return console.log("\u{1F4ED} No completion data found - returning empty array"),[];let i=[],n=Math.ceil((t.getTime()-e.getTime())/(1e3*60*60*24))+1,a=0;for(let c=0;c<n;c++){let u=new Date(e);u.setDate(e.getDate()+c);let l=this.getLocalDateString(u),d=o?.find(_=>this.getLocalDateString(new Date(_.completed_at))===l),p=!!d;p?a=d.streak_count||a+1:a=0,i.push({date:l,completed:p,streakDay:a})}return i}catch(o){return console.error("\u{1F4A5} Error in fallback method:",o),[]}})}};D.\u0275fac=function(e){return new(e||D)},D.\u0275prov=R({token:D,factory:D.\u0275fac,providedIn:"root"});let T=D;return T})();export{j as a};
