import{Fa as W,Ga as M,b as B}from"./chunk-7BOSYXOY.js";import{a as x,b as A,j as g}from"./chunk-VI73JOY6.js";var Z=(()=>{let D=class D{constructor(){this.supabase=W(M.supabaseUrl,M.supabaseKey)}getBusinessTypes(){return g(this,null,function*(){try{let{data:r,error:e}=yield this.supabase.from("business_types").select("*").order("base_cost",{ascending:!0});if(e)throw console.error("Error fetching business types:",e),e;return r||[]}catch(r){throw console.error("Error in getBusinessTypes:",r),r}})}getUserHabitBusinesses(r){return g(this,null,function*(){try{let{data:e,error:t}=yield this.supabase.from("habit_businesses").select(`
          *,
          business_types (
            id,
            name,
            icon,
            base_cost,
            base_pay,
            description
          )
        `).eq("user_id",r).eq("is_active",!0).order("created_at",{ascending:!1});if(t)throw console.error("Error fetching habit businesses:",t),t;return e||[]}catch(e){throw console.error("Error in getUserHabitBusinesses:",e),e}})}createHabitBusiness(r){return g(this,null,function*(){try{let{data:e,error:t}=yield this.supabase.from("business_types").select("*").eq("id",r.business_type_id).single();if(t||!e)throw new Error("Invalid business type");let{data:{user:o},error:s}=yield this.supabase.auth.getUser();if(s||!o)throw new Error("User not authenticated");let{data:c,error:i}=yield this.supabase.from("user_profiles").select("cash").eq("id",o.id).single();if(i||!c)throw new Error("Could not load user profile");if(c.cash<e.base_cost)throw new Error(`Insufficient funds. Need $${e.base_cost}, but you only have $${c.cash}`);if(r.goal_value<1||r.goal_value>99)throw new Error("Goal value must be between 1 and 99");let a={user_id:o.id,business_type_id:r.business_type_id,business_name:r.business_name,business_icon:e.icon,cost:e.base_cost,habit_description:r.habit_description,frequency:r.frequency,goal_value:r.goal_value,current_progress:0,earnings_per_completion:this.calculateReasonableEarnings(e.base_pay,r.goal_value),streak:0,total_completions:0,total_earnings:0,is_active:!0},{data:n,error:u}=yield this.supabase.from("habit_businesses").insert(a).select().single();if(u)throw console.error("Error creating habit business:",u),u;let _=c.cash-e.base_cost,{error:l}=yield this.supabase.from("user_profiles").update({cash:_,updated_at:new Date().toISOString()}).eq("id",o.id);if(l)throw console.error("Error updating user cash:",l),new Error("Habit-business created but failed to deduct payment");try{yield this.createBusinessStock(n.id),console.log("\u2705 Business stock created for new habit business")}catch(h){console.error("\u26A0\uFE0F Warning: Failed to create business stock:",h)}return n}catch(e){throw console.error("Error in createHabitBusiness:",e),e}})}upgradeHabitBusiness(r,e,t){return g(this,null,function*(){try{let{data:{user:o},error:s}=yield this.supabase.auth.getUser();if(s||!o)throw new Error("User not authenticated");let{data:c,error:i}=yield this.supabase.from("business_types").select("*").eq("id",e).single();if(i||!c)throw new Error("Invalid new business type");let{data:a,error:n}=yield this.supabase.from("user_profiles").select("cash").eq("id",o.id).single();if(n||!a)throw new Error("Could not load user profile");if(a.cash<t)throw new Error(`Insufficient funds. Need $${t}, but you only have $${a.cash}`);let{error:u}=yield this.supabase.from("habit_businesses").update({business_type_id:e,business_icon:c.icon,cost:c.base_cost,earnings_per_completion:this.calculateReasonableEarnings(c.base_pay,1),updated_at:new Date().toISOString()}).eq("id",r).eq("user_id",o.id);if(u)throw console.error("Error updating habit business:",u),u;let _=a.cash-t,{error:l}=yield this.supabase.from("user_profiles").update({cash:_,updated_at:new Date().toISOString()}).eq("id",o.id);if(l)throw console.error("Error updating user cash after upgrade:",l),new Error("Business upgraded but failed to deduct payment");console.log("\u2705 Successfully upgraded habit business")}catch(o){throw console.error("Error in upgradeHabitBusiness:",o),o}})}updateHabitBusiness(r,e){return g(this,null,function*(){try{let{data:{user:t},error:o}=yield this.supabase.auth.getUser();if(o||!t)throw new Error("User not authenticated");let{data:s,error:c}=yield this.supabase.from("habit_businesses").select("*").eq("id",r).eq("user_id",t.id).single();if(c||!s)throw new Error("Habit-business not found or you do not have permission to edit it");if(e.goal_value!==void 0&&(e.goal_value<1||e.goal_value>99))throw new Error("Goal value must be between 1 and 99");let{error:i}=yield this.supabase.from("habit_businesses").update(A(x({},e),{updated_at:new Date().toISOString()})).eq("id",r);if(i)throw console.error("Error updating habit business:",i),i}catch(t){throw console.error("Error in updateHabitBusiness:",t),t}})}deleteHabitBusiness(r){return g(this,null,function*(){try{let{data:{user:e},error:t}=yield this.supabase.auth.getUser();if(t||!e)throw new Error("User not authenticated");let{data:o,error:s}=yield this.supabase.from("habit_businesses").select(`
          *,
          business_types (
            base_cost
          )
        `).eq("id",r).eq("user_id",e.id).eq("is_active",!0).single();if(s||!o)throw new Error("Habit-business not found or you do not have permission to delete it");let{data:c,error:i}=yield this.supabase.from("habit_businesses").select("id").eq("user_id",e.id).eq("is_active",!0);if(i)throw new Error("Could not verify your habit businesses");if(!c||c.length<=1)throw new Error("Cannot delete your only habit business! You must have at least one active business.");let a=o.cost||o.business_types?.base_cost||1,n=Math.floor(a*.7),{error:u}=yield this.supabase.from("habit_businesses").update({is_active:!1,updated_at:new Date().toISOString()}).eq("id",r);if(u)throw console.error("Error deleting habit business:",u),u;let{data:_,error:l}=yield this.supabase.from("user_profiles").select("cash").eq("id",e.id).single();if(l||!_)throw new Error("Could not load user profile");let h=_.cash+n,{error:p}=yield this.supabase.from("user_profiles").update({cash:h,updated_at:new Date().toISOString()}).eq("id",e.id);if(p)throw console.error("Error updating user cash after sale:",p),new Error("Habit business deleted but failed to add sale proceeds");return n}catch(e){throw console.error("Error in deleteHabitBusiness:",e),e}})}getLocalDateString(r=new Date){let e=r.getFullYear(),t=String(r.getMonth()+1).padStart(2,"0"),o=String(r.getDate()).padStart(2,"0");return`${e}-${t}-${o}`}validateNotFutureDate(){let r=new Date,e=new Date(r.getTime()+r.getTimezoneOffset()*6e4),t=this.getLocalDateString(r),o=this.getLocalDateString(e);if(t>o){console.warn("\u26A0\uFE0F Local date appears to be ahead of UTC. Local:",t,"UTC:",o);let s=new Date(t+"T00:00:00"),c=new Date(o+"T00:00:00");if(Math.floor((s.getTime()-c.getTime())/(1e3*60*60*24))>1)throw new Error("Cannot complete habits for future dates. Please check your device date/time settings.")}}completeHabit(r){return g(this,null,function*(){try{this.validateNotFutureDate();let{data:{user:e},error:t}=yield this.supabase.auth.getUser();if(t||!e)throw new Error("User not authenticated");let{data:o,error:s}=yield this.supabase.from("habit_businesses").select("*").eq("id",r).eq("user_id",e.id).single();if(s||!o)throw new Error("Habit-business not found");let c=this.getLocalDateString(),i=o.last_completed_at?this.getLocalDateString(new Date(o.last_completed_at)):null,a=o.current_progress||0;if((o.goal_value||1)>1&&console.log(`\u{1F50D} Multi-completion check: ${o.business_name} (${a}/${o.goal_value||1})`),o.frequency==="daily"&&i!==c)a=0;else if(o.frequency==="weekly"&&i){let f=new Date,S=new Date(o.last_completed_at),y=new Date(f),E=y.getDay(),N=E===0?6:E-1;y.setDate(y.getDate()-N),y.setHours(0,0,0,0);let H=new Date(S),I=H.getDay(),K=I===0?6:I-1;H.setDate(H.getDate()-K),H.setHours(0,0,0,0),y.getTime()!==H.getTime()&&(a=0)}let n=o.goal_value||1;if(a>=n)throw new Error(`Goal already completed! You've done ${a}/${n} for today.`);let u=new Date;u.setHours(0,0,0,0);let _=new Date;_.setHours(23,59,59,999);let{data:l,error:h}=yield this.supabase.from("habit_completions").select("id, completed_at").eq("habit_business_id",r).eq("user_id",e.id).gte("completed_at",u.toISOString()).lte("completed_at",_.toISOString());if(h)console.error("Error checking existing completions:",h);else if(l&&l.length>0){console.log("\u26A0\uFE0F Found existing completions for today:",l);let f=l.length;if(f>=n)throw new Error(`Already completed ${f}/${n} times today. Cannot complete again.`)}a+=1;let p=new Date,d=o.streak,b=a>=n;if(b)if(o.last_completed_at){let f=new Date(o.last_completed_at),S=p.getTime()-f.getTime(),y=Math.floor(S/(1e3*3600*24));o.frequency==="daily"&&y===1||o.frequency==="weekly"&&y>=7&&y<14?d+=1:y>(o.frequency==="daily"?1:7)?d=1:d+=1}else d=1;let w=b&&d>1?(d-1)*.1:0,m=o.earnings_per_completion,v=m*w,$=m+v,q=0,O=null;if(b){let{data:f,error:S}=yield this.supabase.from("business_stocks").select(`
            id,
            shares_owned_by_owner,
            total_shares_issued,
            stock_holdings (
              shares_owned,
              holder_id
            )
          `).eq("habit_business_id",r).single();if(!S&&f){O=f.id;let E=(f.total_shares_issued-f.shares_owned_by_owner)/f.total_shares_issued*100,N=Math.floor(E/10)*5;q=$*(N/100)}}let C=$+q,k=new Date,T=new Date(k.getFullYear(),k.getMonth(),k.getDate(),12,0,0);console.log("\u{1F550} Recording completion for:",{userLocalTime:k.toString(),completionTimestamp:T.toISOString(),localDateString:this.getLocalDateString(k)});let{data:Y,error:P}=yield this.supabase.from("habit_completions").insert({habit_business_id:r,user_id:e.id,earnings:C,streak_count:d,completed_at:T.toISOString()}).select().single();if(P)throw P;if(b)try{console.log("\u{1F4B0} Processing dividends for completed habit:",r);let{data:f,error:S}=yield this.supabase.from("business_stocks").select("id, total_shares_issued, shares_owned_by_owner, current_stock_price").eq("habit_business_id",r).single();if(S)console.warn("\u26A0\uFE0F No stock info found for business:",S.message);else if(f){let y=f.total_shares_issued-f.shares_owned_by_owner;if(console.log(`\u{1F4CA} Stock info: total_shares=${f.total_shares_issued}, owner_shares=${f.shares_owned_by_owner}, investor_shares=${y}, stock_price=$${f.current_stock_price}`),y>0)try{let{error:E}=yield this.supabase.rpc("process_habit_completion_dividends",{completion_uuid:Y.id});if(E)throw console.warn("\u26A0\uFE0F RPC function failed:",E.message),E;console.log("\u2705 Dividend payments processed via RPC for habit completion")}catch{console.log("\u{1F504} RPC failed, attempting manual dividend processing..."),yield this.processDividendsManually(r,C,f.id)}else console.log("\u{1F4A1} No external investors - skipping dividend processing")}}catch(f){console.error("\u26A0\uFE0F Warning: Failed to process dividends:",f),console.log("\u{1F4A1} Habit completion succeeded, but dividend processing failed. This is non-critical.")}let L={current_progress:a,total_completions:o.total_completions+1,total_earnings:o.total_earnings+C,last_completed_at:p.toISOString(),updated_at:p.toISOString()};b&&(L.streak=d);let{error:R}=yield this.supabase.from("habit_businesses").update(L).eq("id",r);if(R)throw R;if(b)try{yield this.supabase.rpc("update_stock_price_by_streak",{habit_business_uuid:r}),console.log("\u2705 Stock price updated based on new streak")}catch(f){console.error("\u26A0\uFE0F Warning: Failed to update stock price:",f)}let{data:F,error:G}=yield this.supabase.from("user_profiles").select("cash, net_worth").eq("id",e.id).single();if(G||!F)throw new Error("Could not load user profile");let j=F.cash+C,V=F.net_worth+C,{error:J}=yield this.supabase.from("user_profiles").update({cash:j,net_worth:V,updated_at:p.toISOString()}).eq("id",e.id);if(J)throw new Error("Habit completed but failed to add earnings")}catch(e){throw console.error("Error in completeHabit:",e),e}})}undoHabitCompletion(r){return g(this,null,function*(){try{let{data:{user:e},error:t}=yield this.supabase.auth.getUser();if(t||!e)throw new Error("User not authenticated");let{data:o,error:s}=yield this.supabase.from("habit_businesses").select("*").eq("id",r).eq("user_id",e.id).single();if(s||!o)throw new Error("Habit-business not found");let c=this.getLocalDateString(),i=o.last_completed_at?this.getLocalDateString(new Date(o.last_completed_at)):null;if(console.log("\u{1F4C5} Checking undo eligibility - Today:",c,"Last completed:",i),i!==c)throw new Error("No completion found for today to undo");let a=new Date;a.setHours(0,0,0,0);let n=new Date;n.setHours(23,59,59,999);let u=a.toISOString(),_=n.toISOString();console.log("\u{1F50D} Looking for completion between:",u,"and",_);let{data:l,error:h}=yield this.supabase.from("habit_completions").select("*").eq("habit_business_id",r).eq("user_id",e.id).gte("completed_at",u).lte("completed_at",_).order("completed_at",{ascending:!1}).limit(1).single();if(h||!l){console.error("\u274C Completion lookup error:",h),console.log("\u{1F50D} Checking all recent completions for debugging...");let{data:T}=yield this.supabase.from("habit_completions").select("*").eq("habit_business_id",r).eq("user_id",e.id).order("completed_at",{ascending:!1}).limit(5);throw console.log("\u{1F4CA} Recent completions found:",T),new Error("Could not find today's completion record")}let p=Math.max(0,o.streak-1),{data:d,error:b}=yield this.supabase.from("habit_completions").select("completed_at").eq("habit_business_id",r).eq("user_id",e.id).neq("id",l.id).order("completed_at",{ascending:!1}).limit(1).single(),w=Math.max(0,(o.current_progress||0)-1),{error:m}=yield this.supabase.from("habit_businesses").update({streak:p,current_progress:w,total_completions:Math.max(0,o.total_completions-1),total_earnings:Math.max(0,o.total_earnings-l.earnings),last_completed_at:d?.completed_at||null,updated_at:new Date().toISOString()}).eq("id",r);if(console.log(`\u21A9\uFE0F Undoing completion: progress ${o.current_progress} \u2192 ${w}`),m)throw m;let{data:v,error:$}=yield this.supabase.from("user_profiles").select("cash, net_worth").eq("id",e.id).single();if($||!v)throw new Error("Could not load user profile");let q=Math.max(0,v.cash-l.earnings),O=Math.max(0,v.net_worth-l.earnings),{error:C}=yield this.supabase.from("user_profiles").update({cash:q,net_worth:O,updated_at:new Date().toISOString()}).eq("id",e.id);if(C)throw new Error("Failed to remove earnings from cash");let{error:k}=yield this.supabase.from("habit_completions").delete().eq("id",l.id);k&&console.error("Error deleting completion record:",k)}catch(e){throw console.error("Error in undoHabitCompletion:",e),e}})}getTodaysHabits(r){return g(this,null,function*(){try{let e=new Date().toISOString().split("T")[0],{data:t,error:o}=yield this.supabase.from("habit_businesses").select(`
          *,
          business_types (
            id,
            name,
            icon,
            base_cost,
            base_pay,
            description
          )
        `).eq("user_id",r).eq("is_active",!0).eq("frequency","daily").or(`last_completed_at.is.null,last_completed_at.lt.${e}`).order("created_at",{ascending:!1});if(o)throw console.error("Error fetching today's habits:",o),o;return t||[]}catch(e){throw console.error("Error in getTodaysHabits:",e),e}})}processDividendsManually(r,e,t){return g(this,null,function*(){try{console.log("\u{1F527} Manual dividend processing for business:",r);let{data:o,error:s}=yield this.supabase.from("stock_holdings").select("*").eq("stock_id",t).gt("shares_owned",0);if(s)throw s;if(!o||o.length===0){console.log("\u{1F4A1} No stockholders found for dividend distribution");return}let{data:c,error:i}=yield this.supabase.from("business_stocks").select("total_shares_issued, shares_owned_by_owner").eq("id",t).single();if(i||!c)throw new Error("Could not get stock information");let a=c.total_shares_issued-c.shares_owned_by_owner,n=a/c.total_shares_issued,u=Math.floor(n*10)*.05,_=e*u,l=_*.5;if(console.log(`\u{1F4B0} Dividend calculation: total_earnings=${e}, ownership=${(n*100).toFixed(1)}%, boost=${_.toFixed(2)}, pool=${l.toFixed(2)}`),l<=0){console.log("\u{1F4A1} No dividend pool to distribute");return}let h=l/a;for(let p of o){let d=p.shares_owned*h;console.log(`\u{1F4B8} Paying ${d.toFixed(2)} dividend to holder ${p.holder_id} (${p.shares_owned} shares)`);let{error:b}=yield this.supabase.from("stock_dividend_distributions").insert({dividend_payment_id:`manual-${r}-${Date.now()}`,stockholder_id:p.holder_id,shares_owned:p.shares_owned,dividend_per_share:h,total_dividend:d});if(b){console.error("Error recording dividend distribution:",b);continue}let{data:w,error:m}=yield this.supabase.from("user_profiles").select("cash, net_worth").eq("id",p.holder_id).single();if(m||!w){console.error("Error getting stockholder profile:",m);continue}let v=w.cash+d,$=w.net_worth+d,{error:q}=yield this.supabase.from("user_profiles").update({cash:v,net_worth:$,updated_at:new Date().toISOString()}).eq("id",p.holder_id);if(q){console.error("Error updating stockholder cash:",q);continue}let{error:O}=yield this.supabase.from("stock_holdings").update({total_dividends_earned:p.total_dividends_earned+d,updated_at:new Date().toISOString()}).eq("id",p.id);O&&console.error("Error updating holding dividends:",O)}console.log("\u2705 Manual dividend processing completed")}catch(o){throw console.error("\u274C Error in manual dividend processing:",o),o}})}distributeDividends(r,e){return g(this,null,function*(){try{let{data:t,error:o}=yield this.supabase.from("stock_holdings").select("*").eq("stock_id",r).gt("shares_owned",0);if(o)throw o;if(!t||t.length===0)return;let s=t.reduce((i,a)=>i+a.shares_owned,0);if(s===0)return;let c=e/s;for(let i of t){let a=i.shares_owned*c,{error:n}=yield this.supabase.from("stock_dividend_distributions").insert({dividend_payment_id:r,stockholder_id:i.holder_id,shares_owned:i.shares_owned,dividend_per_share:c,total_dividend:a});if(n){console.error("Error recording dividend distribution:",n);continue}let{data:u,error:_}=yield this.supabase.from("user_profiles").select("cash").eq("id",i.holder_id).single();if(!_&&u){let{error:h}=yield this.supabase.from("user_profiles").update({cash:u.cash+a,updated_at:new Date().toISOString()}).eq("id",i.holder_id);h&&console.error("Error updating stockholder cash:",h)}let{error:l}=yield this.supabase.from("stock_holdings").update({total_dividends_earned:i.total_dividends_earned+a,updated_at:new Date().toISOString()}).eq("id",i.id);l&&console.error("Error updating holding dividends:",l)}}catch(t){throw console.error("Error in distributeDividends:",t),t}})}sellStockShares(r,e){return g(this,null,function*(){try{let{data:t}=yield this.supabase.auth.getUser();if(!t.user)throw new Error("User not authenticated");let{data:o,error:s}=yield this.supabase.rpc("sell_stock_shares",{seller_id:t.user.id,stock_uuid:r,shares_to_sell:e});if(s)throw s;return o}catch(t){throw console.error("Error selling stock shares:",t),t}})}updateStockPrice(r){return g(this,null,function*(){try{let{data:e,error:t}=yield this.supabase.rpc("update_stock_price_by_streak",{habit_business_uuid:r});if(t)throw t;return e||0}catch(e){throw console.error("Error updating stock price:",e),e}})}calculateUpgradeOptions(r){return g(this,null,function*(){try{let{data:e,error:t}=yield this.supabase.from("habit_businesses").select(`
          *,
          business_types (
            id,
            name,
            icon,
            base_cost,
            base_pay,
            description
          )
        `).eq("id",r).single();if(t||!e)throw new Error("Habit business not found");let o=yield this.getBusinessTypes(),s=Math.max(1,e.streak),c=e.earnings_per_completion*s,i=c*e.streak*30,a=o.filter(u=>u.base_cost>(e.business_types?.base_cost||0)),n=a.map(u=>{let _=u.base_cost,l=i-_,h=i>=_;return{businessType:u,upgradeCost:_,profitFromUpgrade:l,canAfford:h}});return{currentBusinessValue:c,streakMultiplier:s,totalStreakValue:i,availableUpgrades:a,upgradeOptions:n}}catch(e){throw console.error("Error in calculateUpgradeOptions:",e),e}})}upgradeBusiness(r,e,t,o){return g(this,null,function*(){try{let{data:{user:s},error:c}=yield this.supabase.auth.getUser();if(c||!s)throw new Error("User not authenticated");let i=yield this.calculateUpgradeOptions(r),a=i.upgradeOptions.find(p=>p.businessType.id===e);if(!a||!a.canAfford)throw new Error("Cannot afford this upgrade");let{data:n,error:u}=yield this.supabase.from("habit_businesses").select("*").eq("id",r).single();if(u||!n)throw new Error("Old business not found");let _=yield this.createHabitBusiness({business_type_id:e,business_name:t,habit_description:o,frequency:n.frequency,goal_value:n.goal_value||1}),{error:l}=yield this.supabase.from("business_upgrades").insert({user_id:s.id,old_habit_business_id:r,new_habit_business_id:_.id,old_business_type_id:n.business_type_id,new_business_type_id:e,streak_value_sold:i.totalStreakValue,upgrade_cost:a.upgradeCost,profit_from_upgrade:a.profitFromUpgrade,old_streak_count:n.streak});if(l&&console.error("Error recording upgrade:",l),a.profitFromUpgrade>0){let{data:p,error:d}=yield this.supabase.from("user_profiles").select("cash").eq("id",s.id).single();if(!d&&p){let{error:b}=yield this.supabase.from("user_profiles").update({cash:p.cash+a.profitFromUpgrade,updated_at:new Date().toISOString()}).eq("id",s.id);b&&console.error("Error adding upgrade profit:",b)}}let{error:h}=yield this.supabase.from("habit_businesses").update({is_active:!1,updated_at:new Date().toISOString()}).eq("id",r);return h&&console.error("Error deactivating old business:",h),_}catch(s){throw console.error("Error in upgradeBusiness:",s),s}})}getUserStockHoldings(r){return g(this,null,function*(){try{let{data:e,error:t}=yield this.supabase.from("stock_holdings").select(`
          *,
          business_stocks (
            id,
            habit_business_id,
            business_owner_id,
            current_stock_price,
            total_shares_issued,
            shares_owned_by_owner,
            shares_available,
            price_multiplier,
            habit_businesses (
              id,
              business_name,
              business_icon,
              streak,
              business_types (
                name,
                icon
              )
            )
          )
        `).eq("holder_id",r).gt("shares_owned",0);if(t)throw console.error("Error fetching stock holdings:",t),t;return e||[]}catch(e){throw console.error("Error in getUserStockHoldings:",e),e}})}getAvailableStocks(r){return g(this,null,function*(){try{let{data:e,error:t}=yield this.supabase.from("business_stocks").select(`
          *,
          habit_businesses (
            id,
            business_name,
            business_icon,
            streak,
            user_id,
            business_types (
              name,
              icon
            )
          )
        `).gt("shares_available",0).neq("business_owner_id",r);if(t)throw console.error("Error fetching available stocks:",t),t;return e||[]}catch(e){throw console.error("Error in getAvailableStocks:",e),e}})}purchaseStock(r,e){return g(this,null,function*(){try{let{data:{user:t},error:o}=yield this.supabase.auth.getUser();if(o||!t)throw new Error("User not authenticated");let{data:s,error:c}=yield this.supabase.from("business_stocks").select("*").eq("id",r).single();if(c||!s)throw new Error("Stock not found");if(s.shares_available<e)throw new Error("Not enough shares available");let i=s.current_stock_price*e,{data:a,error:n}=yield this.supabase.from("user_profiles").select("cash").eq("id",t.id).single();if(n||!a)throw new Error("Could not load user profile");if(a.cash<i)throw new Error(`Insufficient funds. Need $${i}, but you only have $${a.cash}`);let{data:u,error:_}=yield this.supabase.from("stock_holdings").select("*").eq("holder_id",t.id).eq("stock_id",r).single();if(_&&_.code!=="PGRST116")throw _;if(u){let d=u.shares_owned+e,b=u.total_invested+i,w=b/d,{error:m}=yield this.supabase.from("stock_holdings").update({shares_owned:d,total_invested:b,average_purchase_price:w,updated_at:new Date().toISOString()}).eq("id",u.id);if(m)throw m}else{let{error:d}=yield this.supabase.from("stock_holdings").insert({holder_id:t.id,stock_id:r,shares_owned:e,average_purchase_price:s.current_stock_price,total_invested:i});if(d)throw d}let{error:l}=yield this.supabase.from("business_stocks").update({shares_available:s.shares_available-e,updated_at:new Date().toISOString()}).eq("id",r);if(l)throw l;let{error:h}=yield this.supabase.from("stock_transactions").insert({stock_id:r,buyer_id:t.id,seller_id:null,shares_traded:e,price_per_share:s.current_stock_price,total_cost:i,transaction_type:"purchase"});h&&console.error("Error recording transaction:",h);let{error:p}=yield this.supabase.from("user_profiles").update({cash:a.cash-i,updated_at:new Date().toISOString()}).eq("id",t.id);if(p)throw new Error("Stock purchased but failed to deduct payment")}catch(t){throw console.error("Error in purchaseStock:",t),t}})}getTodaysActualEarnings(r){return g(this,null,function*(){try{let e=new Date,t=new Date(e.getFullYear(),e.getMonth(),e.getDate()),o=new Date(t.getTime()+24*60*60*1e3);console.log(`\u{1F4CA} Fetching habit earnings for ${r} between ${t.toISOString()} and ${o.toISOString()}`);let{data:s,error:c}=yield this.supabase.from("habit_completions").select("earnings, completed_at").eq("user_id",r).gte("completed_at",t.toISOString()).lt("completed_at",o.toISOString());if(c)throw console.error("Error fetching today's actual earnings:",c),c;let i=s?.reduce((a,n)=>a+n.earnings,0)||0;return console.log(`\u{1F4B0} Today's habit earnings for user: $${i.toFixed(2)} (${s?.length||0} completions)`),i}catch(e){throw console.error("Error in getTodaysActualEarnings:",e),e}})}getTodaysStockDividends(r){return g(this,null,function*(){try{let e=new Date,t=new Date(e.getFullYear(),e.getMonth(),e.getDate()),o=new Date(t.getTime()+24*60*60*1e3);console.log(`\u{1F4CA} Fetching stock dividends for ${r} between ${t.toISOString()} and ${o.toISOString()}`);let{data:s,error:c}=yield this.supabase.from("stock_dividend_distributions").select("total_dividend, created_at").eq("stockholder_id",r).gte("created_at",t.toISOString()).lt("created_at",o.toISOString());if(c)throw console.error("Error fetching today's stock dividends:",c),c;let i=s?.reduce((a,n)=>a+n.total_dividend,0)||0;console.log(`\u{1F4B0} Today's stock dividends for user: $${i.toFixed(2)} (${s?.length||0} distributions)`),s&&s.length>0&&(console.log("\u{1F50D} Individual dividend payments received today:"),s.forEach((a,n)=>{console.log(`  ${n+1}. $${a.total_dividend.toFixed(4)} received at ${a.created_at}`)}));try{let a=yield this.getUserStockHoldings(r);a.length>0?console.log(`\u{1F4C8} User has ${a.length} stock holdings that could generate dividends:`,a.map(n=>`${n.business_stocks?.habit_businesses?.business_name}: ${n.shares_owned} shares`)):console.log("\u2139\uFE0F User has no stock holdings - dividends will always be $0")}catch(a){console.warn("Could not fetch holdings for dividend debugging:",a)}return i}catch(e){throw console.error("Error in getTodaysStockDividends:",e),e}})}getDividendSystemDebugInfo(r){return g(this,null,function*(){try{let e=yield this.getUserStockHoldings(r),{data:t}=yield this.supabase.from("business_stocks").select(`
          *,
          habit_businesses!inner (
            id,
            business_name,
            user_id
          )
        `).eq("habit_businesses.user_id",r),o=yield this.getTodaysStockDividends(r),{data:s}=yield this.supabase.from("stock_dividend_distributions").select("*").eq("stockholder_id",r).order("created_at",{ascending:!1}).limit(10);return{userHoldings:e||[],ownedBusinessStocks:t||[],todaysDividends:o,recentDividendDistributions:s||[]}}catch(e){throw console.error("Error getting dividend debug info:",e),e}})}createTestDividend(r,e=5){return g(this,null,function*(){try{let{error:t}=yield this.supabase.from("stock_dividend_distributions").insert({dividend_payment_id:`test-${Date.now()}`,stockholder_id:r,shares_owned:10,dividend_per_share:e/10,total_dividend:e});if(t)throw t;console.log(`\u2705 Created test dividend of $${e} for user ${r}`)}catch(t){throw console.error("Error creating test dividend:",t),t}})}resetOutdatedDailyHabits(){return g(this,null,function*(){try{console.log("\u{1F504} Checking for outdated daily habits to reset..."),yield this.cleanupInvalidCompletions();let{data:r,error:e}=yield this.supabase.rpc("reset_outdated_daily_habits");if(e){console.error("Error resetting outdated daily habits:",e);return}if(r&&r.length>0){console.log(`\u2705 Reset ${r.length} outdated daily habit(s):`,r);for(let t of r)try{yield this.supabase.rpc("update_stock_price_by_streak",{habit_business_uuid:t.id}),console.log(`\u{1F4C8} Updated stock price for habit: ${t.business_name}`)}catch(o){console.error(`\u26A0\uFE0F Failed to update stock price for habit ${t.id}:`,o)}}else console.log("\u2705 No daily habits needed resetting")}catch(r){console.error("Error in resetOutdatedDailyHabits:",r)}})}cleanupInvalidCompletions(){return g(this,null,function*(){try{let{data:{user:r},error:e}=yield this.supabase.auth.getUser();if(e||!r)return;let t=new Date,o=new Date(t.getFullYear(),t.getMonth(),t.getDate(),23,59,59,999);console.log("\u{1F9F9} Cleaning up completion records after:",o.toISOString());let{data:s,error:c}=yield this.supabase.from("habit_completions").select("id, completed_at, habit_business_id").eq("user_id",r.id).gt("completed_at",o.toISOString());if(c){console.error("Error querying future completions:",c);return}if(s&&s.length>0){console.log(`\u26A0\uFE0F Found ${s.length} future completion records to clean up:`,s.map(a=>({id:a.id,date:a.completed_at,business:a.habit_business_id?.substring(0,8),isAfterToday:new Date(a.completed_at)>o})));let{error:i}=yield this.supabase.from("habit_completions").delete().in("id",s.map(a=>a.id));if(i)console.error("Error deleting future completions:",i);else{console.log("\u2705 Cleaned up future completion records");let a=[...new Set(s.map(n=>n.habit_business_id))];for(let n of a)if(n){let{error:u}=yield this.supabase.from("habit_businesses").update({current_progress:0,updated_at:new Date().toISOString()}).eq("id",n);u&&console.error("Error resetting progress for business:",n,u)}}}else console.log("\u2705 No future completion records found to clean up")}catch(r){console.error("Error in cleanupInvalidCompletions:",r)}})}cleanupHabitCompletions(r){return g(this,null,function*(){try{let{data:{user:e},error:t}=yield this.supabase.auth.getUser();if(t||!e)return;console.log("\u{1F6A8} Emergency cleanup for habit:",r);let{data:o,error:s}=yield this.supabase.from("habit_completions").select("*").eq("habit_business_id",r).eq("user_id",e.id).order("completed_at",{ascending:!0});if(s){console.error("Error fetching completions:",s);return}if(!o||o.length===0){console.log("No completions found for this habit");return}console.log(`Found ${o.length} completion records`);let c=new Map,i=[];for(let n of o){let u=n.completed_at.split("T")[0];c.has(u)?(i.push(n.id),console.log(`\u{1F5D1}\uFE0F Marking duplicate for deletion: ${n.id} (${n.completed_at})`)):(c.set(u,n),console.log(`\u2705 Keeping completion: ${n.id} (${n.completed_at})`))}if(i.length>0){let{error:n}=yield this.supabase.from("habit_completions").delete().in("id",i);n?console.error("Error deleting duplicates:",n):console.log(`\u2705 Deleted ${i.length} duplicate completion records`)}let{error:a}=yield this.supabase.from("habit_businesses").update({current_progress:0,updated_at:new Date().toISOString()}).eq("id",r);a?console.error("Error resetting habit progress:",a):console.log("\u2705 Reset habit progress to 0")}catch(e){console.error("Error in cleanupHabitCompletions:",e)}})}checkUserHabitsNeedReset(r){return g(this,null,function*(){try{let{data:e,error:t}=yield this.supabase.rpc("check_user_habits_need_reset",{user_uuid:r});return t?(console.error("Error checking user habits reset status:",t),[]):e||[]}catch(e){return console.error("Error in checkUserHabitsNeedReset:",e),[]}})}getFriendBusinesses(r){return g(this,null,function*(){try{let{data:e,error:t}=yield this.supabase.rpc("get_friend_businesses_for_stocks",{user_uuid:r});return t?(console.error("Error loading friend businesses for stocks:",t),[]):(e||[]).map(o=>({id:o.business_id,businessName:o.business_name,businessIcon:o.business_icon,ownerName:o.owner_name,ownerId:o.owner_id,streak:o.streak||0,frequency:o.frequency,goalValue:o.goal_value||1,currentProgress:o.current_progress||0,earningsPerCompletion:o.earnings_per_completion||0,stockId:o.stock_id,stockPrice:o.stock_price,basePrice:o.base_price||100,priceMultiplier:o.price_multiplier||1,sharesAvailable:o.shares_available||200,totalShares:o.total_shares||1e3,potentialDividend:o.potential_dividend||0}))}catch(e){return console.error("Error in getFriendBusinesses:",e),[]}})}getUserStockPortfolio(r){return g(this,null,function*(){console.log("\u{1F50D} Loading portfolio for userId:",r),console.log("\u{1F50D} User ID type:",typeof r),console.log("\u{1F50D} User ID length:",r?.length);try{console.log("\u{1F50D} About to call RPC function...");let{data:e,error:t}=yield this.supabase.rpc("get_user_stock_portfolio",{user_uuid:r});if(console.log("\u{1F50D} Portfolio RPC response:",{data:e,error:t}),console.log("\u{1F50D} Data type:",typeof e),console.log("\u{1F50D} Data is array:",Array.isArray(e)),console.log("\u{1F50D} Data length:",e?.length),console.log("\u{1F50D} Raw data:",JSON.stringify(e,null,2)),t)return console.error("\u274C Error loading stock portfolio:",t),console.error("\u274C Error details:",t.message,t.code,t.hint),console.error("\u274C Full error object:",JSON.stringify(t,null,2)),[];if(console.log("\u{1F50D} Portfolio data length:",e?.length||0),!e||e.length===0){console.log("\u26A0\uFE0F No portfolio data returned - checking if transactions exist...");let{data:s,error:c}=yield this.supabase.from("stock_transactions").select("*").eq("buyer_id",r).eq("transaction_type","purchase");console.log("\u{1F50D} Raw transactions check:",{rawTransactions:s,transactionsError:c}),console.log("\u{1F50D} Found",s?.length||0,"transactions for user"),console.log("\u{1F50D} Testing direct RPC call...");let{data:i,error:a}=yield this.supabase.rpc("get_user_stock_portfolio",{user_uuid:"cf12469a-d7a2-40ef-82ca-21e8ade1d69b"});return console.log("\u{1F50D} Test RPC result:",{testData:i,testError:a}),[]}let o=(e||[]).map(s=>(console.log("\u{1F50D} Portfolio holding raw data:",s),{id:s.holding_id,stockId:s.stock_id,businessId:s.business_id,businessName:s.business_name,businessIcon:s.business_icon,ownerName:s.owner_name,ownerId:s.owner_id||s.business_owner_id,sharesOwned:s.shares_owned,averagePurchasePrice:s.average_purchase_price,currentPrice:s.current_stock_price,totalInvested:s.total_invested,currentValue:s.current_value,profitLoss:s.profit_loss,totalDividendsEarned:s.total_dividends_earned,dailyDividendRate:s.daily_dividend_rate,businessStreak:s.business_streak}));return console.log("\u{1F50D} Mapped portfolio data:",o),o}catch(e){return console.error("\u274C Error in getUserStockPortfolio:",e),console.error("\u274C Full error object:",JSON.stringify(e,null,2)),[]}})}purchaseStockShares(r,e){return g(this,null,function*(){try{let{data:{user:t},error:o}=yield this.supabase.auth.getUser();if(o||!t)throw new Error("User not authenticated");let{data:s,error:c}=yield this.supabase.rpc("purchase_stock_shares",{buyer_id:t.id,stock_uuid:r,shares_to_buy:e});if(c)throw console.error("Error purchasing stock shares:",c),c;if(!s.success)throw new Error(s.error);return s}catch(t){throw console.error("Error in purchaseStockShares:",t),t}})}createBusinessStock(r){return g(this,null,function*(){try{let{data:e,error:t}=yield this.supabase.rpc("create_business_stock",{habit_business_uuid:r});if(t)throw console.error("Error creating business stock:",t),t;return e}catch(e){throw console.error("Error in createBusinessStock:",e),e}})}fixAllStockPrices(){return g(this,null,function*(){try{console.log("\u{1F527} Starting comprehensive stock price fix..."),console.log("\u{1F527} Running database fixes...");let{error:r}=yield this.supabase.rpc("execute_sql",{sql:`
          -- Fix earnings_per_completion for businesses with incorrect values
          UPDATE habit_businesses 
          SET earnings_per_completion = CASE
              WHEN earnings_per_completion > (
                  SELECT base_pay 
                  FROM business_types bt 
                  WHERE bt.id = habit_businesses.business_type_id
              ) THEN (
                  SELECT base_pay 
                  FROM business_types bt 
                  WHERE bt.id = habit_businesses.business_type_id
              )
              WHEN earnings_per_completion < 0.01 THEN GREATEST(0.01, (
                  SELECT base_pay / 100
                  FROM business_types bt 
                  WHERE bt.id = habit_businesses.business_type_id
              ))
              ELSE earnings_per_completion
          END;

          -- Update stock prices to be reasonable (base_cost * 0.1 * multiplier)
          UPDATE business_stocks 
          SET current_stock_price = ROUND(
              (bt.base_cost * 0.1) * COALESCE(price_multiplier, 1.0), 2
          ),
          last_price_update = NOW()
          FROM habit_businesses hb
          JOIN business_types bt ON hb.business_type_id = bt.id
          WHERE business_stocks.habit_business_id = hb.id;
        `});r&&console.warn("SQL fix failed, continuing with individual updates:",r);let{data:e,error:t}=yield this.supabase.from("habit_businesses").select("id").eq("is_active",!0);if(t)throw t;console.log(`\u{1F527} Updating stock prices for ${e?.length||0} businesses...`);for(let o of e||[])try{yield this.supabase.rpc("update_stock_price_by_streak",{habit_business_uuid:o.id}),console.log(`\u2705 Updated stock price for business ${o.id}`)}catch(s){console.warn(`\u26A0\uFE0F Failed to update stock price for business ${o.id}:`,s)}console.log("\u{1F389} Comprehensive stock price fix complete!")}catch(r){throw console.error("Error in fixAllStockPrices:",r),r}})}fixLemonadeStockPrices(){return g(this,null,function*(){try{console.log("\u{1F34B} Fixing lemonade stock prices...");let{data:r,error:e}=yield this.supabase.from("habit_businesses").select("id").or("business_icon.eq.\u{1F34B},earnings_per_completion.eq.1.00").eq("is_active",!0);if(e)throw e;if(!r||r.length===0){console.log("No lemonade businesses found");return}let t=r.map(s=>s.id);console.log(`Found ${t.length} lemonade businesses:`,t);let{error:o}=yield this.supabase.from("business_stocks").update({current_stock_price:1,price_multiplier:1,last_price_update:new Date().toISOString()}).in("habit_business_id",t);if(o)throw o;console.log("\u2705 Lemonade stock prices fixed!")}catch(r){throw console.error("Error in fixLemonadeStockPrices:",r),r}})}calculatePotentialDividend(r,e,t,o){let s=r*.1,c=Math.min(1+e*.01,2),i=t>=o?1.5:1;return s*c*i/100}getHabitCompletionHistory(r,e=30){return g(this,null,function*(){try{console.log("\u{1F50D} getHabitCompletionHistory called with:",{businessId:r,days:e});let t,o;if(e===365){let l=new Date().getFullYear();t=new Date(l,0,1),o=new Date(l,11,31,23,59,59),console.log("\u{1F4C5} Using calendar year mode for 365 days")}else o=new Date,t=new Date,t.setDate(t.getDate()-e),console.log("\u{1F4C5} Using sliding window mode for",e,"days");console.log("\u{1F4C5} Date range:",{startDate:this.getLocalDateString(t),endDate:this.getLocalDateString(o),mode:e===365?"calendar-year":"sliding-window"});let{data:s,error:c}=yield this.supabase.from("habit_completions").select("id, completed_at, streak_count, earnings, habit_business_id").eq("habit_business_id",r).gte("completed_at",t.toISOString()).lte("completed_at",o.toISOString()).order("completed_at",{ascending:!0});if(c)return console.error("\u274C Error fetching habit completions:",c),[];if(console.log("\u{1F4CA} Raw completion data from Supabase:",s),console.log("\u{1F4C8} Number of completion records found:",s?.length||0),s&&s.length>0){let l=[...new Set(s.map(d=>d.habit_business_id))];console.log("\u{1F50D} Business IDs found in completion data:",l),console.log("\u{1F3AF} Requested business ID:",r),console.log("\u2705 Filtering match:",l.includes(r)?"YES":"NO");let h=s.filter(d=>d.habit_business_id===r);console.log("\u{1F4C5} Completion dates for business",r.substring(0,8)+"...:",h.map(d=>({id:d.id,date:d.completed_at,streak:d.streak_count,earnings:d.earnings,business_id:d.habit_business_id})));let p=[...new Set(h.map(d=>d.completed_at?.split("T")[0]))];console.log("\u{1F4C6} Unique completion dates:",p.length,"dates:",p),console.log("\u{1F50D} ALL completion records in query result:"),s.forEach((d,b)=>{console.log(`  ${b+1}. ID: ${d.id}, Business: ${d.habit_business_id?.substring(0,8)}..., Date: ${d.completed_at?.split("T")[0]}, Earnings: ${d.earnings}`)})}let{data:i}=yield this.supabase.from("habit_completions").select("id, completed_at, streak_count, earnings, habit_business_id").order("completed_at",{ascending:!0});if(console.log("\u{1F30D} TOTAL completion records in database:",i?.length),i&&i.length>0){console.log("\u{1F30D} ALL completion records in database:"),i.forEach((h,p)=>{console.log(`  ${p+1}. ID: ${h.id}, Business: ${h.habit_business_id?.substring(0,8)}..., Date: ${h.completed_at?.split("T")[0]}`)});let l=i.reduce((h,p)=>{let d=p.completed_at?.split("T")[0];return h[d]||(h[d]=[]),h[d].push(p),h},{});Object.entries(l).forEach(([h,p])=>{let d=p;d.length>1&&console.log(`\u26A0\uFE0F Date ${h} has ${d.length} records:`,d.map(b=>({id:b.id,business:b.habit_business_id?.substring(0,8)+"..."})))})}let a=[],n=0,u=Math.ceil((o.getTime()-t.getTime())/(1e3*60*60*24))+1;console.log("\u{1F4CA} Generating date range:",u,"days from",this.getLocalDateString(t),"to",this.getLocalDateString(o));for(let l=0;l<u;l++){let h=new Date(t.getFullYear(),t.getMonth(),t.getDate()+l),p=this.getLocalDateString(h),d=s?.find(m=>m.completed_at&&m.completed_at.startsWith(p)),b=this.getLocalDateString(new Date);(p===b||p==="2025-08-20"||l<5||l>=u-5)&&console.log(`\u{1F50D} Date ${l+1}/${u}: ${p} = ${h.toDateString()}, completion:`,d?"YES":"NO");let w=!!d;w?n=d.streak_count||n+1:n=0,a.push({date:p,completed:w,streakDay:n})}console.log("\u2705 Generated date range with",a.length,"days");let _=a.filter(l=>l.completed);return console.log("\u{1F3AF} Completed days:",_.length),console.log("\u{1F4C5} Completed dates:",_.slice(0,10).map(l=>l.date)),a}catch(t){return console.error("\u{1F4A5} Error in getHabitCompletionHistory:",t),[]}})}getHabitCompletionHistoryForStock(r,e=30){return g(this,null,function*(){try{console.log("\u{1F50D} getHabitCompletionHistoryForStock called with:",{businessId:r,days:e});let t,o;if(e===365){let _=new Date().getFullYear();t=new Date(_,0,1),o=new Date(_,11,31,23,59,59),console.log("\u{1F4C5} Using calendar year mode for 365 days")}else o=new Date,t=new Date,t.setDate(t.getDate()-e),console.log("\u{1F4C5} Using sliding window mode for",e,"days");console.log("\u{1F4C5} Stock completion date range:",{startDate:this.getLocalDateString(t),endDate:this.getLocalDateString(o),mode:e===365?"calendar-year":"sliding-window"}),console.log("\u{1F527} Calling RPC function with params:",{input_uuid:r,start_date:t.toISOString(),end_date:o.toISOString()});let{data:s,error:c}=yield this.supabase.rpc("get_habit_completions_for_stock",{input_uuid:r,start_date:t.toISOString(),end_date:o.toISOString()});if(console.log("\u{1F50D} RPC Response:",{data:s,error:c}),c)return console.error("\u274C Error fetching stock habit completions:",c),console.error("\u274C Error details:",c.message,c.code,c.hint),this.getHabitCompletionHistoryFallback(r,t,o);console.log("\u{1F4CA} Raw stock completion data:",s),console.log("\u{1F4C8} Number of stock completion records found:",s?.length||0),(!s||s.length===0)&&(console.warn("\u26A0\uFE0F No completion data returned for business:",r),console.log("\u{1F4DD} Debugging - params sent:",{input_uuid:r,start_date:t.toISOString(),end_date:o.toISOString()}));let i=[],a=Math.ceil((o.getTime()-t.getTime())/(1e3*60*60*24))+1,n=0;for(let _=0;_<a;_++){let l=new Date(t);l.setDate(t.getDate()+_);let h=this.getLocalDateString(l),p=s?.find(b=>this.getLocalDateString(new Date(b.completed_at))===h),d=!!p;d?n=p.streak_count||n+1:n=0,i.push({date:h,completed:d,streakDay:n})}console.log("\u2705 Generated stock date range with",i.length,"days");let u=i.filter(_=>_.completed);return console.log("\u{1F3AF} Stock completed days:",u.length),i}catch(t){return console.error("\u{1F4A5} Error in getHabitCompletionHistoryForStock:",t),console.log("\u{1F504} Falling back to regular completion history method"),this.getHabitCompletionHistory(r,e)}})}calculateReasonableEarnings(r,e){if(!e||e<=0)return r;let t=r/e,o=r,s=Math.max(.01,r*.01);return Math.min(o,Math.max(s,t))}getHabitCompletionHistoryFallback(r,e,t){return g(this,null,function*(){try{console.log("\u{1F504} Using fallback method for completion history");let{data:o,error:s}=yield this.supabase.from("habit_completions").select("id, completed_at, streak_count, habit_business_id").eq("habit_business_id",r).gte("completed_at",e.toISOString()).lte("completed_at",t.toISOString()).order("completed_at",{ascending:!0});if(s)return console.error("\u274C Fallback query failed:",s),console.log("\u{1F6AB} No demo data - returning empty array"),[];if(console.log("\u{1F4CA} Fallback completion data:",o?.length||0,"records"),!o||o.length===0)return console.log("\u{1F4ED} No completion data found - returning empty array"),[];let c=[],i=Math.ceil((t.getTime()-e.getTime())/(1e3*60*60*24))+1,a=0;for(let n=0;n<i;n++){let u=new Date(e);u.setDate(e.getDate()+n);let _=this.getLocalDateString(u),l=o?.find(p=>this.getLocalDateString(new Date(p.completed_at))===_),h=!!l;h?a=l.streak_count||a+1:a=0,c.push({date:_,completed:h,streakDay:a})}return c}catch(o){return console.error("\u{1F4A5} Error in fallback method:",o),[]}})}};D.\u0275fac=function(e){return new(e||D)},D.\u0275prov=B({token:D,factory:D.\u0275fac,providedIn:"root"});let U=D;return U})();export{Z as a};
