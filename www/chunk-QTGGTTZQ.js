import{Fa as G,Ga as N,b as B}from"./chunk-7BOSYXOY.js";import{a as x,b as A,j as _}from"./chunk-VI73JOY6.js";var X=(()=>{let v=class v{constructor(){this.supabase=G(N.supabaseUrl,N.supabaseKey)}getBusinessTypes(){return _(this,null,function*(){try{let{data:t,error:e}=yield this.supabase.from("business_types").select("*").order("base_cost",{ascending:!0});if(e)throw console.error("Error fetching business types:",e),e;return t||[]}catch(t){throw console.error("Error in getBusinessTypes:",t),t}})}getUserHabitBusinesses(t){return _(this,null,function*(){try{let{data:e,error:o}=yield this.supabase.from("habit_businesses").select(`
          *,
          business_types (
            id,
            name,
            icon,
            base_cost,
            base_pay,
            description
          )
        `).eq("user_id",t).eq("is_active",!0).order("created_at",{ascending:!1});if(o)throw console.error("Error fetching habit businesses:",o),o;return e||[]}catch(e){throw console.error("Error in getUserHabitBusinesses:",e),e}})}createHabitBusiness(t){return _(this,null,function*(){try{let{data:e,error:o}=yield this.supabase.from("business_types").select("*").eq("id",t.business_type_id).single();if(o||!e)throw new Error("Invalid business type");let{data:{user:r},error:s}=yield this.supabase.auth.getUser();if(s||!r)throw new Error("User not authenticated");let{data:a,error:n}=yield this.supabase.from("user_profiles").select("cash").eq("id",r.id).single();if(n||!a)throw new Error("Could not load user profile");if(a.cash<e.base_cost)throw new Error(`Insufficient funds. Need $${e.base_cost}, but you only have $${a.cash}`);if(t.goal_value<1||t.goal_value>99)throw new Error("Goal value must be between 1 and 99");let i={user_id:r.id,business_type_id:t.business_type_id,business_name:t.business_name,business_icon:e.icon,cost:e.base_cost,habit_description:t.habit_description,frequency:t.frequency,goal_value:t.goal_value,current_progress:0,earnings_per_completion:this.calculateReasonableEarnings(e.base_pay,t.goal_value),streak:0,total_completions:0,total_earnings:0,is_active:!0},{data:l,error:p}=yield this.supabase.from("habit_businesses").insert(i).select().single();if(p)throw console.error("Error creating habit business:",p),p;let g=a.cash-e.base_cost,{error:c}=yield this.supabase.from("user_profiles").update({cash:g,updated_at:new Date().toISOString()}).eq("id",r.id);if(c)throw console.error("Error updating user cash:",c),new Error("Habit-business created but failed to deduct payment");try{yield this.createBusinessStock(l.id),console.log("\u2705 Business stock created for new habit business")}catch(u){console.error("\u26A0\uFE0F Warning: Failed to create business stock:",u)}return l}catch(e){throw console.error("Error in createHabitBusiness:",e),e}})}upgradeHabitBusiness(t,e,o){return _(this,null,function*(){try{let{data:{user:r},error:s}=yield this.supabase.auth.getUser();if(s||!r)throw new Error("User not authenticated");let{data:a,error:n}=yield this.supabase.from("business_types").select("*").eq("id",e).single();if(n||!a)throw new Error("Invalid new business type");let{data:i,error:l}=yield this.supabase.from("user_profiles").select("cash").eq("id",r.id).single();if(l||!i)throw new Error("Could not load user profile");if(i.cash<o)throw new Error(`Insufficient funds. Need $${o}, but you only have $${i.cash}`);let{error:p}=yield this.supabase.from("habit_businesses").update({business_type_id:e,business_icon:a.icon,cost:a.base_cost,earnings_per_completion:this.calculateReasonableEarnings(a.base_pay,1),updated_at:new Date().toISOString()}).eq("id",t).eq("user_id",r.id);if(p)throw console.error("Error updating habit business:",p),p;let g=i.cash-o,{error:c}=yield this.supabase.from("user_profiles").update({cash:g,updated_at:new Date().toISOString()}).eq("id",r.id);if(c)throw console.error("Error updating user cash after upgrade:",c),new Error("Business upgraded but failed to deduct payment");console.log("\u2705 Successfully upgraded habit business")}catch(r){throw console.error("Error in upgradeHabitBusiness:",r),r}})}updateHabitBusiness(t,e){return _(this,null,function*(){try{let{data:{user:o},error:r}=yield this.supabase.auth.getUser();if(r||!o)throw new Error("User not authenticated");let{data:s,error:a}=yield this.supabase.from("habit_businesses").select("*").eq("id",t).eq("user_id",o.id).single();if(a||!s)throw new Error("Habit-business not found or you do not have permission to edit it");if(e.goal_value!==void 0&&(e.goal_value<1||e.goal_value>99))throw new Error("Goal value must be between 1 and 99");let{error:n}=yield this.supabase.from("habit_businesses").update(A(x({},e),{updated_at:new Date().toISOString()})).eq("id",t);if(n)throw console.error("Error updating habit business:",n),n}catch(o){throw console.error("Error in updateHabitBusiness:",o),o}})}deleteHabitBusiness(t){return _(this,null,function*(){try{let{data:{user:e},error:o}=yield this.supabase.auth.getUser();if(o||!e)throw new Error("User not authenticated");let{data:r,error:s}=yield this.supabase.from("habit_businesses").select(`
          *,
          business_types (
            base_cost
          )
        `).eq("id",t).eq("user_id",e.id).eq("is_active",!0).single();if(s||!r)throw new Error("Habit-business not found or you do not have permission to delete it");let{data:a,error:n}=yield this.supabase.from("habit_businesses").select("id").eq("user_id",e.id).eq("is_active",!0);if(n)throw new Error("Could not verify your habit businesses");if(!a||a.length<=1)throw new Error("Cannot delete your only habit business! You must have at least one active business.");let i=r.cost||r.business_types?.base_cost||1,l=Math.floor(i*.7),{error:p}=yield this.supabase.from("habit_businesses").update({is_active:!1,updated_at:new Date().toISOString()}).eq("id",t);if(p)throw console.error("Error deleting habit business:",p),p;let{data:g,error:c}=yield this.supabase.from("user_profiles").select("cash").eq("id",e.id).single();if(c||!g)throw new Error("Could not load user profile");let u=g.cash+l,{error:h}=yield this.supabase.from("user_profiles").update({cash:u,updated_at:new Date().toISOString()}).eq("id",e.id);if(h)throw console.error("Error updating user cash after sale:",h),new Error("Habit business deleted but failed to add sale proceeds");return l}catch(e){throw console.error("Error in deleteHabitBusiness:",e),e}})}getLocalDateString(t=new Date){let e=t.getFullYear(),o=String(t.getMonth()+1).padStart(2,"0"),r=String(t.getDate()).padStart(2,"0");return`${e}-${o}-${r}`}validateNotFutureDate(){let t=new Date,e=new Date(t.getTime()+t.getTimezoneOffset()*6e4),o=this.getLocalDateString(t),r=this.getLocalDateString(e);if(o>r){console.warn("\u26A0\uFE0F Local date appears to be ahead of UTC. Local:",o,"UTC:",r);let s=new Date(o+"T00:00:00"),a=new Date(r+"T00:00:00");if(Math.floor((s.getTime()-a.getTime())/(1e3*60*60*24))>1)throw new Error("Cannot complete habits for future dates. Please check your device date/time settings.")}}completeHabit(t){return _(this,null,function*(){try{this.validateNotFutureDate();let{data:{user:e},error:o}=yield this.supabase.auth.getUser();if(o||!e)throw new Error("User not authenticated");let{data:r,error:s}=yield this.supabase.from("habit_businesses").select("*").eq("id",t).eq("user_id",e.id).single();if(s||!r)throw new Error("Habit-business not found");let a=this.getLocalDateString(),n=r.last_completed_at?this.getLocalDateString(new Date(r.last_completed_at)):null,i=r.current_progress||0;if((r.goal_value||1)>1&&console.log(`\u{1F50D} Multi-completion check: ${r.business_name} (${i}/${r.goal_value||1})`),r.frequency==="daily"&&n!==a)i=0;else if(r.frequency==="weekly"&&n){let f=new Date,E=new Date(r.last_completed_at),w=new Date(f),k=w.getDay(),F=k===0?6:k-1;w.setDate(w.getDate()-F),w.setHours(0,0,0,0);let O=new Date(E),R=O.getDay(),J=R===0?6:R-1;O.setDate(O.getDate()-J),O.setHours(0,0,0,0),w.getTime()!==O.getTime()&&(i=0)}let l=r.goal_value||1;if(i>=l)throw new Error(`Goal already completed! You've done ${i}/${l} for today.`);let p=this.getLocalDateString(),{data:g,error:c}=yield this.supabase.from("habit_completions").select("id, completed_at").eq("habit_business_id",t).eq("user_id",e.id);if(c)console.error("Error checking existing completions:",c);else if(g&&g.length>0){let f=g.filter(E=>{let w=this.getLocalDateString(new Date(E.completed_at));return console.log(`\u{1F50D} Checking completion: DB date=${w}, Today=${p}`),w===p});if(console.log(`\u{1F4C5} Found ${f.length} existing completions for today (${p}):`,f.map(E=>({id:E.id,date:E.completed_at}))),f.length>=l)throw new Error(`Already completed ${f.length}/${l} times today. Cannot complete again.`)}i+=1;let u=new Date,h=r.streak,d=i>=l;if(d)if(r.last_completed_at){let f=new Date(r.last_completed_at),E=u.getTime()-f.getTime(),w=Math.floor(E/(1e3*3600*24));r.frequency==="daily"&&w===1||r.frequency==="weekly"&&w>=7&&w<14?h+=1:w>(r.frequency==="daily"?1:7)?h=1:h+=1}else h=1;let b=d&&h>1?(h-1)*.1:0,m=r.earnings_per_completion,y=m*b,S=m+y,C=0,q=null;if(d){let{data:f,error:E}=yield this.supabase.from("business_stocks").select(`
            id,
            shares_owned_by_owner,
            total_shares_issued,
            stock_holdings (
              shares_owned,
              holder_id
            )
          `).eq("habit_business_id",t).single();if(!E&&f){q=f.id;let k=(f.total_shares_issued-f.shares_owned_by_owner)/f.total_shares_issued*100,F=Math.floor(k/10)*5;C=S*(F/100)}}let D=S+C,T=new Date,$=this.getLocalDateString(T),U=new Date(`${$}T18:00:00`);console.log("\u{1F550} Recording completion for USER LOCAL DATE:",{userLocalDate:$,userLocalTime:T.toString(),completionTimestamp:U.toISOString(),serverTime:new Date().toISOString(),timezoneName:Intl.DateTimeFormat().resolvedOptions().timeZone});let{data:W,error:I}=yield this.supabase.from("habit_completions").insert({habit_business_id:t,user_id:e.id,earnings:D,streak_count:h,completed_at:U.toISOString()}).select().single();if(I)throw I;if(d)try{console.log("\u{1F4B0} Processing dividends for completed habit:",t);let{data:f,error:E}=yield this.supabase.from("business_stocks").select("id, total_shares_issued, shares_owned_by_owner, current_stock_price").eq("habit_business_id",t).single();if(E)console.warn("\u26A0\uFE0F No stock info found for business:",E.message);else if(f){let w=f.total_shares_issued-f.shares_owned_by_owner;if(console.log(`\u{1F4CA} Stock info: total_shares=${f.total_shares_issued}, owner_shares=${f.shares_owned_by_owner}, investor_shares=${w}, stock_price=$${f.current_stock_price}`),w>0)try{let{error:k}=yield this.supabase.rpc("process_habit_completion_dividends",{completion_uuid:W.id});if(k)throw console.warn("\u26A0\uFE0F RPC function failed:",k.message),k;console.log("\u2705 Dividend payments processed via RPC for habit completion")}catch{console.log("\u{1F504} RPC failed, attempting manual dividend processing..."),yield this.processDividendsManually(t,D,f.id)}else console.log("\u{1F4A1} No external investors - skipping dividend processing")}}catch(f){console.error("\u26A0\uFE0F Warning: Failed to process dividends:",f),console.log("\u{1F4A1} Habit completion succeeded, but dividend processing failed. This is non-critical.")}let P={current_progress:i,total_completions:r.total_completions+1,total_earnings:r.total_earnings+D,last_completed_at:u.toISOString(),updated_at:u.toISOString()};d&&(P.streak=h);let{error:M}=yield this.supabase.from("habit_businesses").update(P).eq("id",t);if(M)throw M;if(d)try{yield this.supabase.rpc("update_stock_price_by_streak",{habit_business_uuid:t}),console.log("\u2705 Stock price updated based on new streak")}catch(f){console.error("\u26A0\uFE0F Warning: Failed to update stock price:",f)}let{data:L,error:Y}=yield this.supabase.from("user_profiles").select("cash, net_worth").eq("id",e.id).single();if(Y||!L)throw new Error("Could not load user profile");let V=L.cash+D,z=L.net_worth+D,{error:j}=yield this.supabase.from("user_profiles").update({cash:V,net_worth:z,updated_at:u.toISOString()}).eq("id",e.id);if(j)throw new Error("Habit completed but failed to add earnings")}catch(e){throw console.error("Error in completeHabit:",e),e}})}undoHabitCompletion(t){return _(this,null,function*(){try{let{data:{user:e},error:o}=yield this.supabase.auth.getUser();if(o||!e)throw new Error("User not authenticated");let{data:r,error:s}=yield this.supabase.from("habit_businesses").select("*").eq("id",t).eq("user_id",e.id).single();if(s||!r)throw new Error("Habit-business not found");let a=this.getLocalDateString(),n=r.last_completed_at?this.getLocalDateString(new Date(r.last_completed_at)):null;if(console.log("\u{1F4C5} Checking undo eligibility - Today:",a,"Last completed:",n),n!==a)throw new Error("No completion found for today to undo");let i=new Date;i.setHours(0,0,0,0);let l=new Date;l.setHours(23,59,59,999);let p=i.toISOString(),g=l.toISOString();console.log("\u{1F50D} Looking for completion between:",p,"and",g);let{data:c,error:u}=yield this.supabase.from("habit_completions").select("*").eq("habit_business_id",t).eq("user_id",e.id).gte("completed_at",p).lte("completed_at",g).order("completed_at",{ascending:!1}).limit(1).single();if(u||!c){console.error("\u274C Completion lookup error:",u),console.log("\u{1F50D} Checking all recent completions for debugging...");let{data:U}=yield this.supabase.from("habit_completions").select("*").eq("habit_business_id",t).eq("user_id",e.id).order("completed_at",{ascending:!1}).limit(5);throw console.log("\u{1F4CA} Recent completions found:",U),new Error("Could not find today's completion record")}let h=Math.max(0,r.streak-1),{data:d,error:b}=yield this.supabase.from("habit_completions").select("completed_at").eq("habit_business_id",t).eq("user_id",e.id).neq("id",c.id).order("completed_at",{ascending:!1}).limit(1).single(),m=Math.max(0,(r.current_progress||0)-1),{error:y}=yield this.supabase.from("habit_businesses").update({streak:h,current_progress:m,total_completions:Math.max(0,r.total_completions-1),total_earnings:Math.max(0,r.total_earnings-c.earnings),last_completed_at:d?.completed_at||null,updated_at:new Date().toISOString()}).eq("id",t);if(console.log(`\u21A9\uFE0F Undoing completion: progress ${r.current_progress} \u2192 ${m}`),y)throw y;let{data:S,error:C}=yield this.supabase.from("user_profiles").select("cash, net_worth").eq("id",e.id).single();if(C||!S)throw new Error("Could not load user profile");let q=Math.max(0,S.cash-c.earnings),D=Math.max(0,S.net_worth-c.earnings),{error:T}=yield this.supabase.from("user_profiles").update({cash:q,net_worth:D,updated_at:new Date().toISOString()}).eq("id",e.id);if(T)throw new Error("Failed to remove earnings from cash");let{error:$}=yield this.supabase.from("habit_completions").delete().eq("id",c.id);$&&console.error("Error deleting completion record:",$)}catch(e){throw console.error("Error in undoHabitCompletion:",e),e}})}getTodaysHabits(t){return _(this,null,function*(){try{let e=new Date().toISOString().split("T")[0],{data:o,error:r}=yield this.supabase.from("habit_businesses").select(`
          *,
          business_types (
            id,
            name,
            icon,
            base_cost,
            base_pay,
            description
          )
        `).eq("user_id",t).eq("is_active",!0).eq("frequency","daily").or(`last_completed_at.is.null,last_completed_at.lt.${e}`).order("created_at",{ascending:!1});if(r)throw console.error("Error fetching today's habits:",r),r;return o||[]}catch(e){throw console.error("Error in getTodaysHabits:",e),e}})}processDividendsManually(t,e,o){return _(this,null,function*(){try{console.log("\u{1F527} Manual dividend processing for business:",t);let{data:r,error:s}=yield this.supabase.from("stock_holdings").select("*").eq("stock_id",o).gt("shares_owned",0);if(s)throw s;if(!r||r.length===0){console.log("\u{1F4A1} No stockholders found for dividend distribution");return}let{data:a,error:n}=yield this.supabase.from("business_stocks").select("total_shares_issued, shares_owned_by_owner").eq("id",o).single();if(n||!a)throw new Error("Could not get stock information");let i=a.total_shares_issued-a.shares_owned_by_owner,l=i/a.total_shares_issued,p=Math.floor(l*10)*.05,g=e*p,c=g*.5;if(console.log(`\u{1F4B0} Dividend calculation: total_earnings=${e}, ownership=${(l*100).toFixed(1)}%, boost=${g.toFixed(2)}, pool=${c.toFixed(2)}`),c<=0){console.log("\u{1F4A1} No dividend pool to distribute");return}let u=c/i;for(let h of r){let d=h.shares_owned*u;console.log(`\u{1F4B8} Paying ${d.toFixed(2)} dividend to holder ${h.holder_id} (${h.shares_owned} shares)`);let{error:b}=yield this.supabase.from("stock_dividend_distributions").insert({dividend_payment_id:crypto.randomUUID(),stockholder_id:h.holder_id,shares_owned:h.shares_owned,dividend_per_share:u,total_dividend:d});if(b){console.error("Error recording dividend distribution:",b);continue}let{data:m,error:y}=yield this.supabase.from("user_profiles").select("cash, net_worth").eq("id",h.holder_id).single();if(y||!m){console.error("Error getting stockholder profile:",y);continue}let S=m.cash+d,C=m.net_worth+d,{error:q}=yield this.supabase.from("user_profiles").update({cash:S,net_worth:C,updated_at:new Date().toISOString()}).eq("id",h.holder_id);if(q){console.error("Error updating stockholder cash:",q);continue}let{error:D}=yield this.supabase.from("stock_holdings").update({total_dividends_earned:h.total_dividends_earned+d,updated_at:new Date().toISOString()}).eq("id",h.id);D&&console.error("Error updating holding dividends:",D)}console.log("\u2705 Manual dividend processing completed")}catch(r){throw console.error("\u274C Error in manual dividend processing:",r),r}})}distributeDividends(t,e){return _(this,null,function*(){try{let{data:o,error:r}=yield this.supabase.from("stock_holdings").select("*").eq("stock_id",t).gt("shares_owned",0);if(r)throw r;if(!o||o.length===0)return;let s=o.reduce((n,i)=>n+i.shares_owned,0);if(s===0)return;let a=e/s;for(let n of o){let i=n.shares_owned*a,{error:l}=yield this.supabase.from("stock_dividend_distributions").insert({dividend_payment_id:crypto.randomUUID(),stockholder_id:n.holder_id,shares_owned:n.shares_owned,dividend_per_share:a,total_dividend:i});if(l){console.error("Error recording dividend distribution:",l);continue}let{data:p,error:g}=yield this.supabase.from("user_profiles").select("cash").eq("id",n.holder_id).single();if(!g&&p){let{error:u}=yield this.supabase.from("user_profiles").update({cash:p.cash+i,updated_at:new Date().toISOString()}).eq("id",n.holder_id);u&&console.error("Error updating stockholder cash:",u)}let{error:c}=yield this.supabase.from("stock_holdings").update({total_dividends_earned:n.total_dividends_earned+i,updated_at:new Date().toISOString()}).eq("id",n.id);c&&console.error("Error updating holding dividends:",c)}}catch(o){throw console.error("Error in distributeDividends:",o),o}})}sellStockShares(t,e){return _(this,null,function*(){try{let{data:o}=yield this.supabase.auth.getUser();if(!o.user)throw new Error("User not authenticated");let{data:r,error:s}=yield this.supabase.rpc("sell_stock_shares",{seller_id:o.user.id,stock_uuid:t,shares_to_sell:e});if(s)throw s;return r}catch(o){throw console.error("Error selling stock shares:",o),o}})}updateStockPrice(t){return _(this,null,function*(){try{let{data:e,error:o}=yield this.supabase.rpc("update_stock_price_by_streak",{habit_business_uuid:t});if(o)throw o;return e||0}catch(e){throw console.error("Error updating stock price:",e),e}})}calculateUpgradeOptions(t){return _(this,null,function*(){try{let{data:e,error:o}=yield this.supabase.from("habit_businesses").select(`
          *,
          business_types (
            id,
            name,
            icon,
            base_cost,
            base_pay,
            description
          )
        `).eq("id",t).single();if(o||!e)throw new Error("Habit business not found");let r=yield this.getBusinessTypes(),s=Math.max(1,e.streak),a=e.earnings_per_completion*s,n=a*e.streak*30,i=r.filter(p=>p.base_cost>(e.business_types?.base_cost||0)),l=i.map(p=>{let g=p.base_cost,c=n-g,u=n>=g;return{businessType:p,upgradeCost:g,profitFromUpgrade:c,canAfford:u}});return{currentBusinessValue:a,streakMultiplier:s,totalStreakValue:n,availableUpgrades:i,upgradeOptions:l}}catch(e){throw console.error("Error in calculateUpgradeOptions:",e),e}})}upgradeBusiness(t,e,o,r){return _(this,null,function*(){try{let{data:{user:s},error:a}=yield this.supabase.auth.getUser();if(a||!s)throw new Error("User not authenticated");let n=yield this.calculateUpgradeOptions(t),i=n.upgradeOptions.find(h=>h.businessType.id===e);if(!i||!i.canAfford)throw new Error("Cannot afford this upgrade");let{data:l,error:p}=yield this.supabase.from("habit_businesses").select("*").eq("id",t).single();if(p||!l)throw new Error("Old business not found");let g=yield this.createHabitBusiness({business_type_id:e,business_name:o,habit_description:r,frequency:l.frequency,goal_value:l.goal_value||1}),{error:c}=yield this.supabase.from("business_upgrades").insert({user_id:s.id,old_habit_business_id:t,new_habit_business_id:g.id,old_business_type_id:l.business_type_id,new_business_type_id:e,streak_value_sold:n.totalStreakValue,upgrade_cost:i.upgradeCost,profit_from_upgrade:i.profitFromUpgrade,old_streak_count:l.streak});if(c&&console.error("Error recording upgrade:",c),i.profitFromUpgrade>0){let{data:h,error:d}=yield this.supabase.from("user_profiles").select("cash").eq("id",s.id).single();if(!d&&h){let{error:b}=yield this.supabase.from("user_profiles").update({cash:h.cash+i.profitFromUpgrade,updated_at:new Date().toISOString()}).eq("id",s.id);b&&console.error("Error adding upgrade profit:",b)}}let{error:u}=yield this.supabase.from("habit_businesses").update({is_active:!1,updated_at:new Date().toISOString()}).eq("id",t);return u&&console.error("Error deactivating old business:",u),g}catch(s){throw console.error("Error in upgradeBusiness:",s),s}})}getUserStockHoldings(t){return _(this,null,function*(){try{let{data:e,error:o}=yield this.supabase.from("stock_holdings").select(`
          *,
          business_stocks (
            id,
            habit_business_id,
            business_owner_id,
            current_stock_price,
            total_shares_issued,
            shares_owned_by_owner,
            shares_available,
            price_multiplier,
            habit_businesses (
              id,
              business_name,
              business_icon,
              streak,
              business_types (
                name,
                icon
              )
            )
          )
        `).eq("holder_id",t).gt("shares_owned",0);if(o)throw console.error("Error fetching stock holdings:",o),o;return e||[]}catch(e){throw console.error("Error in getUserStockHoldings:",e),e}})}getAvailableStocks(t){return _(this,null,function*(){try{let{data:e,error:o}=yield this.supabase.from("business_stocks").select(`
          *,
          habit_businesses (
            id,
            business_name,
            business_icon,
            streak,
            user_id,
            business_types (
              name,
              icon
            )
          )
        `).gt("shares_available",0).neq("business_owner_id",t);if(o)throw console.error("Error fetching available stocks:",o),o;return e||[]}catch(e){throw console.error("Error in getAvailableStocks:",e),e}})}purchaseStock(t,e){return _(this,null,function*(){try{let{data:{user:o},error:r}=yield this.supabase.auth.getUser();if(r||!o)throw new Error("User not authenticated");let{data:s,error:a}=yield this.supabase.from("business_stocks").select("*").eq("id",t).single();if(a||!s)throw new Error("Stock not found");if(s.shares_available<e)throw new Error("Not enough shares available");let n=s.current_stock_price*e,{data:i,error:l}=yield this.supabase.from("user_profiles").select("cash").eq("id",o.id).single();if(l||!i)throw new Error("Could not load user profile");if(i.cash<n)throw new Error(`Insufficient funds. Need $${n}, but you only have $${i.cash}`);let{data:p,error:g}=yield this.supabase.from("stock_holdings").select("*").eq("holder_id",o.id).eq("stock_id",t).single();if(g&&g.code!=="PGRST116")throw g;if(p){let d=p.shares_owned+e,b=p.total_invested+n,m=b/d,{error:y}=yield this.supabase.from("stock_holdings").update({shares_owned:d,total_invested:b,average_purchase_price:m,updated_at:new Date().toISOString()}).eq("id",p.id);if(y)throw y}else{let{error:d}=yield this.supabase.from("stock_holdings").insert({holder_id:o.id,stock_id:t,shares_owned:e,average_purchase_price:s.current_stock_price,total_invested:n});if(d)throw d}let{error:c}=yield this.supabase.from("business_stocks").update({shares_available:s.shares_available-e,updated_at:new Date().toISOString()}).eq("id",t);if(c)throw c;let{error:u}=yield this.supabase.from("stock_transactions").insert({stock_id:t,buyer_id:o.id,seller_id:null,shares_traded:e,price_per_share:s.current_stock_price,total_cost:n,transaction_type:"purchase"});u&&console.error("Error recording transaction:",u);let{error:h}=yield this.supabase.from("user_profiles").update({cash:i.cash-n,updated_at:new Date().toISOString()}).eq("id",o.id);if(h)throw new Error("Stock purchased but failed to deduct payment")}catch(o){throw console.error("Error in purchaseStock:",o),o}})}getTodaysActualEarnings(t){return _(this,null,function*(){try{let e=this.getLocalDateString(new Date);console.log(`\u{1F4CA} Fetching habit earnings for ${t} on local date: ${e}`);let{data:o,error:r}=yield this.supabase.from("habit_completions").select("earnings, completed_at").eq("user_id",t);if(r)throw console.error("Error fetching today's actual earnings:",r),r;let s=o?.filter(n=>this.getLocalDateString(new Date(n.completed_at))===e)||[],a=s.reduce((n,i)=>n+i.earnings,0);return console.log(`\u{1F4B0} Today's habit earnings for user: $${a.toFixed(2)} (${s.length} completions from ${o?.length||0} total)`),console.log(`\u{1F4C5} Filtering for local date: ${e}`),a}catch(e){throw console.error("Error in getTodaysActualEarnings:",e),e}})}getTodaysStockDividends(t){return _(this,null,function*(){try{let e=new Date,o=new Date(e.getFullYear(),e.getMonth(),e.getDate()),r=new Date(o.getTime()+24*60*60*1e3);console.log(`\u{1F4CA} Fetching stock dividends for ${t} between ${o.toISOString()} and ${r.toISOString()}`);let{data:s,error:a}=yield this.supabase.from("stock_dividend_distributions").select("total_dividend, created_at").eq("stockholder_id",t).gte("created_at",o.toISOString()).lt("created_at",r.toISOString());if(a)throw console.error("Error fetching today's stock dividends:",a),a;let n=s?.reduce((i,l)=>i+l.total_dividend,0)||0;console.log(`\u{1F4B0} Today's stock dividends for user: $${n.toFixed(2)} (${s?.length||0} distributions)`),s&&s.length>0&&(console.log("\u{1F50D} Individual dividend payments received today:"),s.forEach((i,l)=>{console.log(`  ${l+1}. $${i.total_dividend.toFixed(4)} received at ${i.created_at}`)}));try{let i=yield this.getUserStockHoldings(t);i.length>0?console.log(`\u{1F4C8} User has ${i.length} stock holdings that could generate dividends:`,i.map(l=>`${l.business_stocks?.habit_businesses?.business_name}: ${l.shares_owned} shares`)):console.log("\u2139\uFE0F User has no stock holdings - dividends will always be $0")}catch(i){console.warn("Could not fetch holdings for dividend debugging:",i)}return n}catch(e){throw console.error("Error in getTodaysStockDividends:",e),e}})}getDividendSystemDebugInfo(t){return _(this,null,function*(){try{let e=yield this.getUserStockHoldings(t),{data:o}=yield this.supabase.from("business_stocks").select(`
          *,
          habit_businesses!inner (
            id,
            business_name,
            user_id
          )
        `).eq("habit_businesses.user_id",t),r=yield this.getTodaysStockDividends(t),{data:s}=yield this.supabase.from("stock_dividend_distributions").select("*").eq("stockholder_id",t).order("created_at",{ascending:!1}).limit(10);return{userHoldings:e||[],ownedBusinessStocks:o||[],todaysDividends:r,recentDividendDistributions:s||[]}}catch(e){throw console.error("Error getting dividend debug info:",e),e}})}createTestDividend(t,e=5){return _(this,null,function*(){try{let{error:o}=yield this.supabase.from("stock_dividend_distributions").insert({dividend_payment_id:`test-${Date.now()}`,stockholder_id:t,shares_owned:10,dividend_per_share:e/10,total_dividend:e});if(o)throw o;console.log(`\u2705 Created test dividend of $${e} for user ${t}`)}catch(o){throw console.error("Error creating test dividend:",o),o}})}resetOutdatedDailyHabits(){return _(this,null,function*(){try{console.log("\u{1F504} Checking for outdated daily habits to reset..."),yield this.cleanupInvalidCompletions();let{data:t,error:e}=yield this.supabase.rpc("reset_outdated_daily_habits");if(e){console.error("Error resetting outdated daily habits:",e);return}if(t&&t.length>0){console.log(`\u2705 Reset ${t.length} outdated daily habit(s):`,t);for(let o of t)try{yield this.supabase.rpc("update_stock_price_by_streak",{habit_business_uuid:o.id}),console.log(`\u{1F4C8} Updated stock price for habit: ${o.business_name}`)}catch(r){console.error(`\u26A0\uFE0F Failed to update stock price for habit ${o.id}:`,r)}}else console.log("\u2705 No daily habits needed resetting")}catch(t){console.error("Error in resetOutdatedDailyHabits:",t)}})}cleanupInvalidCompletions(){return _(this,null,function*(){try{let{data:{user:t},error:e}=yield this.supabase.auth.getUser();if(e||!t)return;let o=new Date,r=new Date(o.getFullYear(),o.getMonth(),o.getDate(),23,59,59,999);console.log("\u{1F9F9} Cleaning up completion records after:",r.toISOString());let{data:s,error:a}=yield this.supabase.from("habit_completions").select("id, completed_at, habit_business_id").eq("user_id",t.id).gt("completed_at",r.toISOString());if(a){console.error("Error querying future completions:",a);return}if(s&&s.length>0){console.log(`\u26A0\uFE0F Found ${s.length} future completion records to clean up:`,s.map(i=>({id:i.id,date:i.completed_at,business:i.habit_business_id?.substring(0,8),isAfterToday:new Date(i.completed_at)>r})));let{error:n}=yield this.supabase.from("habit_completions").delete().in("id",s.map(i=>i.id));if(n)console.error("Error deleting future completions:",n);else{console.log("\u2705 Cleaned up future completion records");let i=[...new Set(s.map(l=>l.habit_business_id))];for(let l of i)if(l){let{error:p}=yield this.supabase.from("habit_businesses").update({current_progress:0,updated_at:new Date().toISOString()}).eq("id",l);p&&console.error("Error resetting progress for business:",l,p)}}}else console.log("\u2705 No future completion records found to clean up")}catch(t){console.error("Error in cleanupInvalidCompletions:",t)}})}debugHabitState(t){return _(this,null,function*(){try{let{data:{user:e},error:o}=yield this.supabase.auth.getUser();if(o||!e)throw new Error("User not authenticated");console.log("\u{1F50D} DEBUGGING HABIT STATE for:",t);let{data:r,error:s}=yield this.supabase.from("habit_businesses").select("*").eq("id",t).eq("user_id",e.id).single();console.log("\u{1F4CA} Habit Business State:",r);let a=new Date,n=this.getLocalDateString(a),i=a.toISOString().split("T")[0];console.log("\u{1F4C5} Date Info:",{now:a.toString(),nowISO:a.toISOString(),todayLocal:n,todayUTC:i,timezone:Intl.DateTimeFormat().resolvedOptions().timeZone,timezoneOffset:a.getTimezoneOffset()});let{data:l,error:p}=yield this.supabase.from("habit_completions").select("*").eq("habit_business_id",t).eq("user_id",e.id).order("completed_at",{ascending:!1}).limit(10);console.log("\u{1F4CB} All Recent Completions:",l);let g=new Date(a.getFullYear(),a.getMonth(),a.getDate()),c=new Date(a.getFullYear(),a.getMonth(),a.getDate(),23,59,59,999),{data:u,error:h}=yield this.supabase.from("habit_completions").select("*").eq("habit_business_id",t).eq("user_id",e.id).gte("completed_at",g.toISOString()).lte("completed_at",c.toISOString());console.log("\u{1F4C5} Today's Completions (using time range):",u);let d=l?.filter(y=>this.getLocalDateString(new Date(y.completed_at))===n);console.log("\u{1F4C5} Today's Completions (using date string):",d);let b=this.isCompletedTodayDebug(r),m=this.isGoalCompletedDebug(r);return console.log("\u{1F3AF} UI Method Results:",{isCompletedToday:b,isGoalCompleted:m,currentProgress:r?.current_progress,goalValue:r?.goal_value,lastCompletedAt:r?.last_completed_at}),{habitBusiness:r,dateInfo:{now:a.toString(),todayLocal:n,todayUTC:i,timezone:Intl.DateTimeFormat().resolvedOptions().timeZone},allCompletions:l,todayCompletions:u,todayCompletionsByDate:d,uiResults:{isCompletedToday:b,isGoalCompleted:m}}}catch(e){throw console.error("\u274C Error in debugHabitState:",e),e}})}isCompletedTodayDebug(t){if(console.log("\u{1F50D} isCompletedToday Debug for:",t?.business_name),!t?.last_completed_at)return console.log("\u274C No last_completed_at - returning false"),!1;let e=t.goal_value||1,o=t.current_progress||0;if(console.log("\u{1F4CA} Progress check:",{currentProgress:o,goalValue:e}),e>1&&o<e)return console.log("\u274C Multi-completion habit goal not met - returning false"),!1;if(o===0)return console.log("\u274C Current progress is 0 - returning false"),!1;if(t.frequency==="daily"){let r=new Date,s=this.getLocalDateString(r),a=new Date(t.last_completed_at),n=this.getLocalDateString(a);return console.log("\u{1F4C5} Date comparison:",{todayString:s,completionString:n,match:n===s}),n===s}return!1}isGoalCompletedDebug(t){console.log("\u{1F50D} isGoalCompleted Debug for:",t?.business_name);let e=t?.goal_value||1,o=t?.current_progress||0;if(console.log("\u{1F4CA} Goal check:",{currentProgress:o,goalValue:e}),o<e)return console.log("\u274C Goal not met - returning false"),!1;if(!t?.last_completed_at)return console.log("\u274C No completion record - returning false"),!1;if(t.frequency==="daily"){let r=new Date,s=this.getLocalDateString(r),a=new Date(t.last_completed_at),n=this.getLocalDateString(a);return console.log("\u{1F4C5} Date comparison for goal:",{todayString:s,completionString:n,match:n===s}),n===s}return!1}cleanupHabitCompletions(t){return _(this,null,function*(){try{let{data:{user:e},error:o}=yield this.supabase.auth.getUser();if(o||!e)return;console.log("\u{1F6A8} Emergency cleanup for habit:",t);let{data:r,error:s}=yield this.supabase.from("habit_completions").select("*").eq("habit_business_id",t).eq("user_id",e.id).order("completed_at",{ascending:!0});if(s){console.error("Error fetching completions:",s);return}if(!r||r.length===0){console.log("No completions found for this habit");return}console.log(`Found ${r.length} completion records`);let a=new Map,n=[];for(let c of r){let u=c.completed_at.split("T")[0];a.has(u)?(n.push(c.id),console.log(`\u{1F5D1}\uFE0F Marking duplicate for deletion: ${c.id} (${c.completed_at})`)):(a.set(u,c),console.log(`\u2705 Keeping completion: ${c.id} (${c.completed_at})`))}if(n.length>0){let{error:c}=yield this.supabase.from("habit_completions").delete().in("id",n);c?console.error("Error deleting duplicates:",c):console.log(`\u2705 Deleted ${n.length} duplicate completion records`)}let i=this.getLocalDateString(),p=Array.from(a.entries()).filter(([c,u])=>c===i).length;console.log(`\u{1F4CA} Updating progress: today=${i}, todayCompletions=${p}`);let{error:g}=yield this.supabase.from("habit_businesses").update({current_progress:p,updated_at:new Date().toISOString()}).eq("id",t);g?console.error("Error updating habit progress:",g):console.log(`\u2705 Updated habit progress to ${p}`)}catch(e){console.error("Error in cleanupHabitCompletions:",e)}})}checkUserHabitsNeedReset(t){return _(this,null,function*(){try{let{data:e,error:o}=yield this.supabase.rpc("check_user_habits_need_reset",{user_uuid:t});return o?(console.error("Error checking user habits reset status:",o),[]):e||[]}catch(e){return console.error("Error in checkUserHabitsNeedReset:",e),[]}})}getFriendBusinesses(t){return _(this,null,function*(){try{let{data:e,error:o}=yield this.supabase.rpc("get_friend_businesses_for_stocks",{user_uuid:t});return o?(console.error("Error loading friend businesses for stocks:",o),[]):(e||[]).map(r=>({id:r.business_id,businessName:r.business_name,businessIcon:r.business_icon,ownerName:r.owner_name,ownerId:r.owner_id,streak:r.streak||0,frequency:r.frequency,goalValue:r.goal_value||1,currentProgress:r.current_progress||0,earningsPerCompletion:r.earnings_per_completion||0,stockId:r.stock_id,stockPrice:r.stock_price,basePrice:r.base_price||100,priceMultiplier:r.price_multiplier||1,sharesAvailable:r.shares_available||200,totalShares:r.total_shares||1e3,potentialDividend:r.potential_dividend||0}))}catch(e){return console.error("Error in getFriendBusinesses:",e),[]}})}getUserStockPortfolio(t){return _(this,null,function*(){console.log("\u{1F50D} Loading portfolio for userId:",t),console.log("\u{1F50D} User ID type:",typeof t),console.log("\u{1F50D} User ID length:",t?.length);try{console.log("\u{1F50D} About to call RPC function...");let{data:e,error:o}=yield this.supabase.rpc("get_user_stock_portfolio",{user_uuid:t});if(console.log("\u{1F50D} Portfolio RPC response:",{data:e,error:o}),console.log("\u{1F50D} Data type:",typeof e),console.log("\u{1F50D} Data is array:",Array.isArray(e)),console.log("\u{1F50D} Data length:",e?.length),console.log("\u{1F50D} Raw data:",JSON.stringify(e,null,2)),o)return console.error("\u274C Error loading stock portfolio:",o),console.error("\u274C Error details:",o.message,o.code,o.hint),console.error("\u274C Full error object:",JSON.stringify(o,null,2)),[];if(console.log("\u{1F50D} Portfolio data length:",e?.length||0),!e||e.length===0){console.log("\u26A0\uFE0F No portfolio data returned - checking if transactions exist...");let{data:s,error:a}=yield this.supabase.from("stock_transactions").select("*").eq("buyer_id",t).eq("transaction_type","purchase");console.log("\u{1F50D} Raw transactions check:",{rawTransactions:s,transactionsError:a}),console.log("\u{1F50D} Found",s?.length||0,"transactions for user"),console.log("\u{1F50D} Testing direct RPC call...");let{data:n,error:i}=yield this.supabase.rpc("get_user_stock_portfolio",{user_uuid:"cf12469a-d7a2-40ef-82ca-21e8ade1d69b"});return console.log("\u{1F50D} Test RPC result:",{testData:n,testError:i}),[]}let r=(e||[]).map(s=>(console.log("\u{1F50D} Portfolio holding raw data:",s),{id:s.holding_id,stockId:s.stock_id,businessId:s.business_id,businessName:s.business_name,businessIcon:s.business_icon,ownerName:s.owner_name,ownerId:s.owner_id||s.business_owner_id,sharesOwned:s.shares_owned,averagePurchasePrice:s.average_purchase_price,currentPrice:s.current_stock_price,totalInvested:s.total_invested,currentValue:s.current_value,profitLoss:s.profit_loss,totalDividendsEarned:s.total_dividends_earned,dailyDividendRate:s.daily_dividend_rate,businessStreak:s.business_streak}));return console.log("\u{1F50D} Mapped portfolio data:",r),r}catch(e){return console.error("\u274C Error in getUserStockPortfolio:",e),console.error("\u274C Full error object:",JSON.stringify(e,null,2)),[]}})}purchaseStockShares(t,e){return _(this,null,function*(){try{let{data:{user:o},error:r}=yield this.supabase.auth.getUser();if(r||!o)throw new Error("User not authenticated");let{data:s,error:a}=yield this.supabase.rpc("purchase_stock_shares",{buyer_id:o.id,stock_uuid:t,shares_to_buy:e});if(a)throw console.error("Error purchasing stock shares:",a),a;if(!s.success)throw new Error(s.error);return s}catch(o){throw console.error("Error in purchaseStockShares:",o),o}})}createBusinessStock(t){return _(this,null,function*(){try{let{data:e,error:o}=yield this.supabase.rpc("create_business_stock",{habit_business_uuid:t});if(o)throw console.error("Error creating business stock:",o),o;return e}catch(e){throw console.error("Error in createBusinessStock:",e),e}})}fixAllStockPrices(){return _(this,null,function*(){try{console.log("\u{1F527} Starting comprehensive stock price fix..."),console.log("\u{1F527} Running database fixes...");let{error:t}=yield this.supabase.rpc("execute_sql",{sql:`
          -- Fix earnings_per_completion for businesses with incorrect values
          UPDATE habit_businesses 
          SET earnings_per_completion = CASE
              WHEN earnings_per_completion > (
                  SELECT base_pay 
                  FROM business_types bt 
                  WHERE bt.id = habit_businesses.business_type_id
              ) THEN (
                  SELECT base_pay 
                  FROM business_types bt 
                  WHERE bt.id = habit_businesses.business_type_id
              )
              WHEN earnings_per_completion < 0.01 THEN GREATEST(0.01, (
                  SELECT base_pay / 100
                  FROM business_types bt 
                  WHERE bt.id = habit_businesses.business_type_id
              ))
              ELSE earnings_per_completion
          END;

          -- Update stock prices to be reasonable (base_cost * 0.1 * multiplier)
          UPDATE business_stocks 
          SET current_stock_price = ROUND(
              (bt.base_cost * 0.1) * COALESCE(price_multiplier, 1.0), 2
          ),
          last_price_update = NOW()
          FROM habit_businesses hb
          JOIN business_types bt ON hb.business_type_id = bt.id
          WHERE business_stocks.habit_business_id = hb.id;
        `});t&&console.warn("SQL fix failed, continuing with individual updates:",t);let{data:e,error:o}=yield this.supabase.from("habit_businesses").select("id").eq("is_active",!0);if(o)throw o;console.log(`\u{1F527} Updating stock prices for ${e?.length||0} businesses...`);for(let r of e||[])try{yield this.supabase.rpc("update_stock_price_by_streak",{habit_business_uuid:r.id}),console.log(`\u2705 Updated stock price for business ${r.id}`)}catch(s){console.warn(`\u26A0\uFE0F Failed to update stock price for business ${r.id}:`,s)}console.log("\u{1F389} Comprehensive stock price fix complete!")}catch(t){throw console.error("Error in fixAllStockPrices:",t),t}})}fixLemonadeStockPrices(){return _(this,null,function*(){try{console.log("\u{1F34B} Fixing lemonade stock prices...");let{data:t,error:e}=yield this.supabase.from("habit_businesses").select("id").or("business_icon.eq.\u{1F34B},earnings_per_completion.eq.1.00").eq("is_active",!0);if(e)throw e;if(!t||t.length===0){console.log("No lemonade businesses found");return}let o=t.map(s=>s.id);console.log(`Found ${o.length} lemonade businesses:`,o);let{error:r}=yield this.supabase.from("business_stocks").update({current_stock_price:1,price_multiplier:1,last_price_update:new Date().toISOString()}).in("habit_business_id",o);if(r)throw r;console.log("\u2705 Lemonade stock prices fixed!")}catch(t){throw console.error("Error in fixLemonadeStockPrices:",t),t}})}calculatePotentialDividend(t,e,o,r){let s=t*.1,a=Math.min(1+e*.01,2),n=o>=r?1.5:1;return s*a*n/100}getHabitCompletionHistory(t,e=30){return _(this,null,function*(){try{console.log("\u{1F50D} getHabitCompletionHistory called with:",{businessId:t,days:e});let o,r;if(e===365){let c=new Date().getFullYear();o=new Date(c,0,1),r=new Date(c,11,31,23,59,59),console.log("\u{1F4C5} Using calendar year mode for 365 days")}else r=new Date,o=new Date,o.setDate(o.getDate()-e),console.log("\u{1F4C5} Using sliding window mode for",e,"days");console.log("\u{1F4C5} Date range:",{startDate:this.getLocalDateString(o),endDate:this.getLocalDateString(r),mode:e===365?"calendar-year":"sliding-window"});let{data:s,error:a}=yield this.supabase.from("habit_completions").select("id, completed_at, streak_count, earnings, habit_business_id").eq("habit_business_id",t).gte("completed_at",o.toISOString()).lte("completed_at",r.toISOString()).order("completed_at",{ascending:!0});if(a)return console.error("\u274C Error fetching habit completions:",a),[];if(console.log("\u{1F4CA} Raw completion data from Supabase:",s),console.log("\u{1F4C8} Number of completion records found:",s?.length||0),s&&s.length>0){let c=[...new Set(s.map(d=>d.habit_business_id))];console.log("\u{1F50D} Business IDs found in completion data:",c),console.log("\u{1F3AF} Requested business ID:",t),console.log("\u2705 Filtering match:",c.includes(t)?"YES":"NO");let u=s.filter(d=>d.habit_business_id===t);console.log("\u{1F4C5} Completion dates for business",t.substring(0,8)+"...:",u.map(d=>({id:d.id,date:d.completed_at,streak:d.streak_count,earnings:d.earnings,business_id:d.habit_business_id})));let h=[...new Set(u.map(d=>d.completed_at?.split("T")[0]))];console.log("\u{1F4C6} Unique completion dates:",h.length,"dates:",h),console.log("\u{1F50D} ALL completion records in query result:"),s.forEach((d,b)=>{console.log(`  ${b+1}. ID: ${d.id}, Business: ${d.habit_business_id?.substring(0,8)}..., Date: ${d.completed_at?.split("T")[0]}, Earnings: ${d.earnings}`)})}let{data:n}=yield this.supabase.from("habit_completions").select("id, completed_at, streak_count, earnings, habit_business_id").order("completed_at",{ascending:!0});if(console.log("\u{1F30D} TOTAL completion records in database:",n?.length),n&&n.length>0){console.log("\u{1F30D} ALL completion records in database:"),n.forEach((u,h)=>{console.log(`  ${h+1}. ID: ${u.id}, Business: ${u.habit_business_id?.substring(0,8)}..., Date: ${u.completed_at?.split("T")[0]}`)});let c=n.reduce((u,h)=>{let d=h.completed_at?.split("T")[0];return u[d]||(u[d]=[]),u[d].push(h),u},{});Object.entries(c).forEach(([u,h])=>{let d=h;d.length>1&&console.log(`\u26A0\uFE0F Date ${u} has ${d.length} records:`,d.map(b=>({id:b.id,business:b.habit_business_id?.substring(0,8)+"..."})))})}let i=[],l=0,p=Math.ceil((r.getTime()-o.getTime())/(1e3*60*60*24))+1;console.log("\u{1F4CA} Generating date range:",p,"days from",this.getLocalDateString(o),"to",this.getLocalDateString(r));for(let c=0;c<p;c++){let u=new Date(o.getFullYear(),o.getMonth(),o.getDate()+c),h=this.getLocalDateString(u),d=s?.find(y=>y.completed_at&&y.completed_at.startsWith(h)),b=this.getLocalDateString(new Date);(h===b||h==="2025-08-20"||c<5||c>=p-5)&&console.log(`\u{1F50D} Date ${c+1}/${p}: ${h} = ${u.toDateString()}, completion:`,d?"YES":"NO");let m=!!d;m?l=d.streak_count||l+1:l=0,i.push({date:h,completed:m,streakDay:l})}console.log("\u2705 Generated date range with",i.length,"days");let g=i.filter(c=>c.completed);return console.log("\u{1F3AF} Completed days:",g.length),console.log("\u{1F4C5} Completed dates:",g.slice(0,10).map(c=>c.date)),i}catch(o){return console.error("\u{1F4A5} Error in getHabitCompletionHistory:",o),[]}})}getHabitCompletionHistoryForStock(t,e=30){return _(this,null,function*(){try{console.log("\u{1F50D} getHabitCompletionHistoryForStock called with:",{businessId:t,days:e});let o,r;if(e===365){let g=new Date().getFullYear();o=new Date(g,0,1),r=new Date(g,11,31,23,59,59),console.log("\u{1F4C5} Using calendar year mode for 365 days")}else r=new Date,o=new Date,o.setDate(o.getDate()-e),console.log("\u{1F4C5} Using sliding window mode for",e,"days");console.log("\u{1F4C5} Stock completion date range:",{startDate:this.getLocalDateString(o),endDate:this.getLocalDateString(r),mode:e===365?"calendar-year":"sliding-window"}),console.log("\u{1F527} Calling RPC function with params:",{input_uuid:t,start_date:o.toISOString(),end_date:r.toISOString()});let{data:s,error:a}=yield this.supabase.rpc("get_habit_completions_for_stock",{input_uuid:t,start_date:o.toISOString(),end_date:r.toISOString()});if(console.log("\u{1F50D} RPC Response:",{data:s,error:a}),a)return console.error("\u274C Error fetching stock habit completions:",a),console.error("\u274C Error details:",a.message,a.code,a.hint),this.getHabitCompletionHistoryFallback(t,o,r);console.log("\u{1F4CA} Raw stock completion data:",s),console.log("\u{1F4C8} Number of stock completion records found:",s?.length||0),(!s||s.length===0)&&(console.warn("\u26A0\uFE0F No completion data returned for business:",t),console.log("\u{1F4DD} Debugging - params sent:",{input_uuid:t,start_date:o.toISOString(),end_date:r.toISOString()}));let n=[],i=Math.ceil((r.getTime()-o.getTime())/(1e3*60*60*24))+1,l=0;for(let g=0;g<i;g++){let c=new Date(o);c.setDate(o.getDate()+g);let u=this.getLocalDateString(c),h=s?.find(b=>this.getLocalDateString(new Date(b.completed_at))===u),d=!!h;d?l=h.streak_count||l+1:l=0,n.push({date:u,completed:d,streakDay:l})}console.log("\u2705 Generated stock date range with",n.length,"days");let p=n.filter(g=>g.completed);return console.log("\u{1F3AF} Stock completed days:",p.length),n}catch(o){return console.error("\u{1F4A5} Error in getHabitCompletionHistoryForStock:",o),console.log("\u{1F504} Falling back to regular completion history method"),this.getHabitCompletionHistory(t,e)}})}calculateReasonableEarnings(t,e){if(!e||e<=0)return t;let o=t/e,r=t,s=Math.max(.01,t*.01);return Math.min(r,Math.max(s,o))}getHabitCompletionHistoryFallback(t,e,o){return _(this,null,function*(){try{console.log("\u{1F504} Using fallback method for completion history");let{data:r,error:s}=yield this.supabase.from("habit_completions").select("id, completed_at, streak_count, habit_business_id").eq("habit_business_id",t).gte("completed_at",e.toISOString()).lte("completed_at",o.toISOString()).order("completed_at",{ascending:!0});if(s)return console.error("\u274C Fallback query failed:",s),console.log("\u{1F6AB} No demo data - returning empty array"),[];if(console.log("\u{1F4CA} Fallback completion data:",r?.length||0,"records"),!r||r.length===0)return console.log("\u{1F4ED} No completion data found - returning empty array"),[];let a=[],n=Math.ceil((o.getTime()-e.getTime())/(1e3*60*60*24))+1,i=0;for(let l=0;l<n;l++){let p=new Date(e);p.setDate(e.getDate()+l);let g=this.getLocalDateString(p),c=r?.find(h=>this.getLocalDateString(new Date(h.completed_at))===g),u=!!c;u?i=c.streak_count||i+1:i=0,a.push({date:g,completed:u,streakDay:i})}return a}catch(r){return console.error("\u{1F4A5} Error in fallback method:",r),[]}})}};v.\u0275fac=function(e){return new(e||v)},v.\u0275prov=B({token:v,factory:v.\u0275fac,providedIn:"root"});let H=v;return H})();export{X as a};
